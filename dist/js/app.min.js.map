{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/app/classes/CookieFactory.js","assets/js/app/classes/Product.js","assets/js/app/classes/ShippingField.js","assets/js/app/classes/ShippingManager.js","assets/js/app/classes/ShoppingCart.js","assets/js/app/main.js"],"names":[],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by bryce on 2/16/17.\n */\n\nexport class CookieFactory {\n\n    /**\n     * Default constructor, requires a namespace being passed in for prefixing all data\n     *\n     * @param nameSpace\n     */\n    constructor(nameSpace) {\n        this.nameSpace = nameSpace;\n    }\n\n    /**\n     * Saves a cookie to persistent storage\n     *\n     * @param name The key of the cookie\n     * @param value The new value of the cookie\n     */\n    saveCookie(name, value) {\n        document.cookie = this.nameSpace + \"-\" + name + \"=\" + value + \"; path=/\";\n    }\n\n    /**\n     * Saves a json object as a cookie\n     *\n     * @param name The key for the cookie\n     * @param value The json object to save\n     */\n    saveJSON(name, value) {\n\n        this.saveCookie(name, JSON.stringify(value));\n    }\n\n    /**\n     * Loads a cookie out of the document cookie list\n     *\n     * @param name The name of the cookie we are loading\n     * @returns {*} the new object\n     */\n    loadCookie(name) {\n\n        name = this.nameSpace + \"-\" + name + \"=\";\n        let ca = document.cookie.split(';');\n\n        for (let i=0; i<ca.length; i++) {\n\n            let c = ca[i];\n            while (c.charAt(0) == ' ') {\n                c = c.substring(1);\n            }\n\n            if (c.indexOf(name) == 0) {\n                return c.substring(name.length,c.length);\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Parses a json object from a cookie, or returns an empty JSON\n     *\n     * @param name The name of the json we are loading\n     * @returns {{}} The found object\n     */\n    loadJSON(name) {\n        let content = this.loadCookie(name);\n\n        if (typeof content == \"undefined\")\n            return {};\n        else\n            return JSON.parse(content);\n    }\n\n    /**\n     * Parses a number from a cookie\n     *\n     * @param name The cookie we are looking for\n     * @param defaultValue The default to return if the cookie was not found\n     * @returns {*}\n     */\n    loadNumber(name, defaultValue) {\n        let content = this.loadCookie(name);\n\n        if (typeof content == \"undefined\")\n            return defaultValue;\n\n        return Number(content);\n    }\n\n    /**\n     * Parses a boolean value from a cookie\n     *\n     * @param name The cookie we are looking for\n     * @param defaultValue A default to return if the value was undefined\n     * @returns {*}\n     */\n    loadBoolean (name, defaultValue) {\n        let content = this.loadCookie(name);\n\n        if (typeof content == \"undefined\")\n            return defaultValue;\n\n        return content == 'true';\n    }\n}","/**\n * Created by bryce on 2/8/17.\n */\n\nexport class Product {\n\n    /**\n     * Creates a new instance of a product\n     *\n     * @param productContainer The container that will hold all data for this product\n     * @param quantityChangedCallback\n     */\n    constructor (productContainer, quantityChangedCallback) {\n\n        this.quantityChangedCallback = quantityChangedCallback;\n\n        this.shippingOptions = {};\n        this.quantity = 0;\n        this.total = 0;\n\n        this.id = productContainer.dataset['id'];\n        this.cost = productContainer.dataset['cost'];\n        this.weight = productContainer.dataset['weight'];\n\n        let shippingDivs = productContainer.getElementsByClassName('easy_products-shipping_option');\n\n        for (let i = 0; i < shippingDivs.length; i++) {\n\n            let shippingDiv = shippingDivs[i];\n\n            let regionId = shippingDiv.dataset['region_id'];\n\n            let key = regionId ? regionId : 'default';\n\n            this.shippingOptions[key] = {\n                primary_rate: Number(shippingDiv.dataset['primary_rate']),\n                add_on_rate: Number(shippingDiv.dataset['add_on_rate'])\n            };\n        }\n\n        this.quantityInput = productContainer.querySelector('.easy_products-quantity_input');\n        this.totalDisplay = productContainer.querySelector('.easy_products-product_total_display');\n        this.productTotal = productContainer.querySelector('.easy_products-product_total');\n\n        this.quantityInput.addEventListener('change', this.quantityChanged.bind(this));\n    }\n\n    /**\n     * Sets the quantity and updates the cost variables\n     *\n     * @param quantity\n     */\n    setQuantity (quantity) {\n        this.quantity = quantity;\n        this.total = quantity * this.cost;\n\n        if (this.quantity != this.quantityInput.value) {\n            this.quantityInput.value = this.quantity;\n        }\n\n        if (this.total > 0) {\n            this.productTotal.innerHTML = this.total.toFixed(2);\n            this.totalDisplay.style.display = ''\n        }\n        else {\n            this.totalDisplay.style.display = 'none';\n        }\n    }\n\n    /**\n     * Called when quantity has changed in the input, and will recalculate the totals for this product\n     */\n    quantityChanged () {\n\n        let quantity = Number(this.quantityInput.value);\n\n        if (isNaN(quantity)) {\n            quantity = 0;\n        }\n\n        this.setQuantity(quantity);\n\n        if (typeof this.quantityChangedCallback == 'function') {\n            this.quantityChangedCallback(this);\n        }\n    }\n\n    /**\n     * retrieves the shipping rate for the specified region\n     *\n     * @param regionId\n     * @returns {*}\n     */\n    retrieveShippingRates (regionId) {\n        let rates = this.shippingOptions[regionId];\n\n        return rates ? rates : this.shippingOptions['default'];\n    }\n\n    /**\n     * Compare function for comparing weights of two products\n     *\n     * @param a Product\n     * @param b Product\n     * @returns {number}\n     */\n    static compareWeights (a, b) {\n        if (a.weight < b.weight) {\n            return -1;\n        }\n        if (a.weight > b.weight) {\n            return 1;\n        }\n        return 0;\n    }\n}","/**\n * Created by bryce on 2/16/17.\n */\n\nexport class ShippingField {\n\n    /**\n     * Default constructor for a field\n     *\n     * @param field HTMLNode\n     * @param changeCallback Function\n     * @param cookieFactory CookieFactory\n     * @param cookieKey The key for the stored cookie\n     */\n    constructor (field, changeCallback, cookieFactory, cookieKey) {\n\n        this.field = field;\n        this.changeCallback = changeCallback;\n        this.cookieFactory = cookieFactory;\n        this.cookieKey = cookieKey;\n\n        this.valueEntered = false;\n        this.required = this.field.hasAttribute('required');\n\n        this.blankValue = this.field.dataset['blank_value'];\n\n        let storedValue = this.cookieFactory.loadCookie(this.cookieKey);\n\n        if (storedValue) {\n            this.field.value = storedValue;\n            this.checkInputValue();\n        }\n\n        this.field.addEventListener('change', this.verifyInputValue.bind(this));\n    }\n\n    /**\n     * Determines if the user has entered a proper value\n     */\n    checkInputValue () {\n\n        this.valueEntered = false;\n\n        if (this.field.value) {\n\n            if (this.blankValue) {\n                this.valueEntered = this.blankValue != this.field.value;\n            }\n            else {\n                this.valueEntered = true;\n            }\n        }\n    }\n\n    /**\n     * double checks input value when it changes to verify a value was entered properly\n     */\n    verifyInputValue () {\n        this.checkInputValue();\n\n        if (this.valueEntered) {\n            this.cookieFactory.saveCookie(this.cookieKey, this.field.value);\n            this.changeCallback();\n        }\n    }\n\n    /**\n     * Checks whether or not this field is ready for submission\n     *\n     * @returns Boolean\n     */\n    checkIfComplete () {\n\n        return this.required ? this.valueEntered : true;\n    }\n}","/**\n * Created by bryce on 2/16/17.\n */\n\nimport {ShippingField} from './ShippingField';\n\nexport class ShippingManager {\n\n    /**\n     * Manages the current state of the shipping options\n     *\n     * @param form\n     * @param addressChangeCallback function\n     * @param cookieFactory CookieFactory\n     */\n    constructor (form, addressChangeCallback, cookieFactory) {\n\n        ShippingManager.NAME_COOKIE = \"name\";\n        ShippingManager.ADDRESS_1_COOKIE = \"address_1\";\n        ShippingManager.ADDRESS_2_COOKIE = \"address_2\";\n        ShippingManager.CITY_COOKIE = \"city\";\n        ShippingManager.POSTAL_CODE_COOKIE = \"postal_code\";\n        ShippingManager.STATE_COOKIE = \"state\";\n        ShippingManager.COUNTRY_COOKIE = \"country\";\n\n        let nameInput = form.querySelector(\"#easy_products-name\");\n        let address1Input = form.querySelector(\"#easy_products-address_1\");\n        let address2Input = form.querySelector(\"#easy_products-address_2\");\n        let cityInput = form.querySelector(\"#easy_products-city\");\n        let postalCodeInput = form.querySelector(\"#easy_products-postal_code\");\n        let stateInput = form.querySelector(\"#easy_products-state\");\n        let countrySelect = form.querySelector(\"#easy_products-country\");\n\n        this.nameField = new ShippingField(nameInput, addressChangeCallback, cookieFactory, ShippingManager.NAME_COOKIE);\n        this.address1Field = new ShippingField(address1Input, addressChangeCallback, cookieFactory, ShippingManager.ADDRESS_1_COOKIE);\n        this.address2Field = new ShippingField(address2Input, addressChangeCallback, cookieFactory, ShippingManager.ADDRESS_2_COOKIE);\n        this.cityField = new ShippingField(cityInput, addressChangeCallback, cookieFactory, ShippingManager.CITY_COOKIE);\n        this.postalCodeField = new ShippingField(postalCodeInput, addressChangeCallback, cookieFactory, ShippingManager.POSTAL_CODE_COOKIE);\n        this.stateField = new ShippingField(stateInput, addressChangeCallback, cookieFactory, ShippingManager.STATE_COOKIE);\n        this.countryField = new ShippingField(countrySelect, addressChangeCallback, cookieFactory, ShippingManager.COUNTRY_COOKIE);\n    }\n\n    /**\n     * Checks all fields to see if the shipping is ready to go\n     *\n     * @returns {Boolean}\n     */\n    checkIfShippingComplete() {\n\n        return this.nameField.checkIfComplete() && this.address1Field.checkIfComplete()\n                && this.address2Field.checkIfComplete() && this.cityField.checkIfComplete()\n                && this.postalCodeField.checkIfComplete() && this.stateField.checkIfComplete()\n                && this.countryField.checkIfComplete();\n    }\n\n    /**\n     * Bundles the entire address component into a JSON\n     *\n     * @returns {{name: *, addressLine1: *, addressLine2: *, city: *, postalCode: *, country: {id: *, name: *}}}\n     */\n    bundleAddress () {\n\n        let selectedOption = this.countryField.field.options[this.countryField.field.selectedIndex];\n\n        return {\n            name: this.nameField.field.value,\n            addressLine1: this.address1Field.field.value,\n            addressLine2: this.address2Field.field.value,\n            city: this.cityField.field.value,\n            postalCode: this.postalCodeField.field.value,\n            state: this.stateField.field.value,\n            country: {\n                id: selectedOption.value,\n                name: selectedOption.text\n            }\n        }\n    }\n\n    /**\n     * Gets the selected region id or undefined if none has been found\n     *\n     * @returns Boolean|undefined\n     */\n    getRegionId () {\n        return this.countryField.checkIfComplete() ? this.countryField.field.value : undefined;\n    }\n}","/**\n * Created by bryce on 2/8/17.\n */\n\nimport {Product} from './Product';\nimport {CookieFactory} from './CookieFactory';\nimport {ShippingManager} from './ShippingManager';\n\nexport class ShoppingCart {\n\n    /**\n     * Constructor for this shopping cart instance\n     *\n     * @param productsForm the dom form\n     */\n    constructor (productsForm) {\n        ShoppingCart.PRODUCTS_COOKIE = 'product_quantities';\n\n        this.productsForm = productsForm;\n\n        this.subtotalDisplay = this.productsForm.querySelector('#easy_products-subtotal');\n        this.shippingDisplay = this.productsForm.querySelector('#easy_products-shipping_total');\n        this.totalDisplay = this.productsForm.querySelector('#easy_products-total');\n\n        this.submitButton = this.productsForm.querySelector('#easy_products-submit');\n\n        this.cookieFactory = new CookieFactory('easy_products');\n\n        this.productQuantities = this.cookieFactory.loadJSON(ShoppingCart.PRODUCTS_COOKIE);\n        let unsortedProducts = [];\n\n        let productContainers = this.productsForm.getElementsByClassName('easy_products-product');\n\n        for (let i = 0; i < productContainers.length; i++) {\n\n            let product = new Product(productContainers[i], this.quantityChanged.bind(this));\n\n            let storedQuantity = this.productQuantities[product.id];\n\n            if (typeof storedQuantity != 'number') {\n                storedQuantity = 0;\n            }\n\n            product.setQuantity(storedQuantity);\n\n            unsortedProducts.push(product);\n        }\n\n        this.products = unsortedProducts.sort(Product.compareWeights).reverse();\n\n        this.shippingManager = new ShippingManager(this.productsForm, this.checkShippingAddress.bind(this), this.cookieFactory);\n\n        this.calculateTotals();\n\n        if (document.readyState === \"complete\" || document.readyState === \"loaded\") {\n            this.setupSubmitCallback();\n        }\n        else {\n            document.addEventListener('DOMContentLoaded', this.setupSubmitCallback.bind(this));\n        }\n\n    }\n\n    /**\n     * Sets up the complete callback\n     */\n    setupSubmitCallback () {\n\n        let submitCallbackName = this.productsForm.dataset['submit_callback'];\n\n        if (submitCallbackName) {\n            let submitCallback = eval(submitCallbackName);\n\n            if (typeof submitCallback == 'function') {\n                this.submitCallback = submitCallback;\n            }\n        }\n\n        this.productsForm.addEventListener('submit', this.submitForm.bind(this));\n    }\n\n    /**\n     * Stops the submission if a complete callback is set\n     *\n     * @param event\n     */\n    submitForm (event) {\n        if (this.submitCallback) {\n            event.preventDefault();\n\n            let productData = [];\n\n            for (let i = 0; i < this.products.length; i++) {\n\n                let product = this.products[i];\n\n                if (product.quantity) {\n                    productData.push({\n                        id: product.id,\n                        quantity: product.quantity\n                    });\n                }\n            }\n\n            this.submitCallback(this.productsForm, this.total, productData, this.shippingManager.bundleAddress());\n        }\n    }\n\n    /**\n     * checks to see if the shipping address has been changed\n     */\n    checkShippingAddress () {\n\n        if (this.shippingManager.checkIfShippingComplete()) {\n            this.calculateTotals();\n        }\n        else {\n            this.shippingDisplay.innerHTML = 'Please Enter Your Shipping Address';\n            this.totalDisplay.innerHTML = 'Please Enter Your Shipping Address';\n\n            this.submitButton.disabled = true;\n        }\n    }\n\n    /**\n     * Called whenever a quantity has changed\n     *\n     * @param product Product\n     */\n    quantityChanged (product) {\n        this.productQuantities[product.id] = product.quantity;\n        this.cookieFactory.saveJSON(ShoppingCart.PRODUCTS_COOKIE, this.productQuantities);\n\n        this.calculateTotals();\n    }\n\n    /**\n     * Recalculates all totals\n     */\n    calculateTotals () {\n\n        let subtotal = 0;\n        for (let i = 0; i < this.products.length; i++) {\n            subtotal+= this.products[i].total;\n        }\n\n        this.subtotalDisplay.innerHTML = '$' + subtotal.toFixed(2);\n\n        if (this.shippingManager.checkIfShippingComplete()) {\n\n            let shippingTotal = 0;\n            let regionId = this.shippingManager.getRegionId();\n\n            for (let i = 0; i < this.products.length; i++) {\n                let product = this.products[i];\n\n                if (product.quantity) {\n\n                    let shippingRates = product.retrieveShippingRates(regionId);\n\n                    let addOnQuantity = product.quantity;\n\n                    if (shippingTotal == 0) {\n                        shippingTotal+= shippingRates.primary_rate;\n                        addOnQuantity--;\n                    }\n                    if (addOnQuantity) {\n                        shippingTotal+= shippingRates.add_on_rate * addOnQuantity;\n                    }\n                }\n            }\n\n            this.shippingDisplay.innerHTML = '$' + shippingTotal.toFixed(2);\n\n            this.total = subtotal + shippingTotal;\n\n            this.totalDisplay.innerHTML = '$' + this.total.toFixed(2);\n\n            this.submitButton.disabled = false;\n        }\n    }\n}","/**\n * Created by bryce on 2/8/17.\n */\n\nimport {ShoppingCart} from './classes/ShoppingCart';\n\nlet productsForm = document.getElementById('easy_products-products_list');\n\nif (typeof productsForm != 'undefined') {\n    new ShoppingCart(productsForm);\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvYXBwL2NsYXNzZXMvQ29va2llRmFjdG9yeS5qcyIsImFzc2V0cy9qcy9hcHAvY2xhc3Nlcy9Qcm9kdWN0LmpzIiwiYXNzZXRzL2pzL2FwcC9jbGFzc2VzL1NoaXBwaW5nRmllbGQuanMiLCJhc3NldHMvanMvYXBwL2NsYXNzZXMvU2hpcHBpbmdNYW5hZ2VyLmpzIiwiYXNzZXRzL2pzL2FwcC9jbGFzc2VzL1Nob3BwaW5nQ2FydC5qcyIsImFzc2V0cy9qcy9hcHAvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNBQTs7OztJQUlhLGEsV0FBQSxhOztBQUVUOzs7OztBQUtBLDJCQUFZLFNBQVosRUFBdUI7QUFBQTs7QUFDbkIsYUFBSyxTQUFMLEdBQWlCLFNBQWpCO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7bUNBTVcsSSxFQUFNLEssRUFBTztBQUNwQixxQkFBUyxNQUFULEdBQWtCLEtBQUssU0FBTCxHQUFpQixHQUFqQixHQUF1QixJQUF2QixHQUE4QixHQUE5QixHQUFvQyxLQUFwQyxHQUE0QyxVQUE5RDtBQUNIOztBQUVEOzs7Ozs7Ozs7aUNBTVMsSSxFQUFNLEssRUFBTzs7QUFFbEIsaUJBQUssVUFBTCxDQUFnQixJQUFoQixFQUFzQixLQUFLLFNBQUwsQ0FBZSxLQUFmLENBQXRCO0FBQ0g7O0FBRUQ7Ozs7Ozs7OzttQ0FNVyxJLEVBQU07O0FBRWIsbUJBQU8sS0FBSyxTQUFMLEdBQWlCLEdBQWpCLEdBQXVCLElBQXZCLEdBQThCLEdBQXJDO0FBQ0EsZ0JBQUksS0FBSyxTQUFTLE1BQVQsQ0FBZ0IsS0FBaEIsQ0FBc0IsR0FBdEIsQ0FBVDs7QUFFQSxpQkFBSyxJQUFJLElBQUUsQ0FBWCxFQUFjLElBQUUsR0FBRyxNQUFuQixFQUEyQixHQUEzQixFQUFnQzs7QUFFNUIsb0JBQUksSUFBSSxHQUFHLENBQUgsQ0FBUjtBQUNBLHVC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Q0o7O0FBRUQscUJBQUssZUFBTCxDQUFxQixTQUFyQixHQUFpQyxNQUFNLGNBQWMsT0FBZCxDQUFzQixDQUF0QixDQUF2Qzs7QUFFQSxxQkFBSyxLQUFMLEdBQWEsV0FBVyxhQUF4Qjs7QUFFQSxxQkFBSyxZQUFMLENBQWtCLFNBQWxCLEdBQThCLE1BQU0sS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixDQUFuQixDQUFwQzs7QUFFQSxxQkFBSyxZQUFMLENBQWtCLFFBQWxCLEdBQTZCLEtBQTdCO0FBQ0g7QUFDSjs7Ozs7Ozs7O0FDaExMOztBQUVBLElBQUksZUFBZSxTQUFTLGNBQVQsQ0FBd0IsNkJBQXhCLENBQW5CLEMsQ0FOQTs7OztBQVFBLElBQUksT0FBTyxZQUFQLElBQXVCLFdBQTNCLEVBQXdDO0FBQ3BDLGlDQUFpQixZQUFqQjtBQUNIIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBicnljZSBvbiAyLzE2LzE3LlxuICovXG5cbmV4cG9ydCBjbGFzcyBDb29raWVGYWN0b3J5IHtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY29uc3RydWN0b3IsIHJlcXVpcmVzIGEgbmFtZXNwYWNlIGJlaW5nIHBhc3NlZCBpbiBmb3IgcHJlZml4aW5nIGFsbCBkYXRhXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZVNwYWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZVNwYWNlKSB7XG4gICAgICAgIHRoaXMubmFtZVNwYWNlID0gbmFtZVNwYWNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhdmVzIGEgY29va2llIHRvIHBlcnNpc3RlbnQgc3RvcmFnZVxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIGtleSBvZiB0aGUgY29va2llXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgdmFsdWUgb2YgdGhlIGNvb2tpZVxuICAgICAqL1xuICAgIHNhdmVDb29raWUobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gdGhpcy5uYW1lU3BhY2UgKyBcIi1cIiArIG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCI7IHBhdGg9L1wiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhdmVzIGEganNvbiBvYmplY3QgYXMgYSBjb29raWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBrZXkgZm9yIHRoZSBjb29raWVcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGpzb24gb2JqZWN0IHRvIHNhdmVcbiAgICAgKi9cbiAgICBzYXZlSlNPTihuYW1lLCB2YWx1ZSkge1xuXG4gICAgICAgIHRoaXMuc2F2ZUNvb2tpZShuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWRzIGEgY29va2llIG91dCBvZiB0aGUgZG9jdW1lbnQgY29va2llIGxpc3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb29raWUgd2UgYXJlIGxvYWRpbmdcbiAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIG5ldyBvYmplY3RcbiAgICAgKi9cbiAgICBsb2FkQ29va2llKG5hbWUpIHtcblxuICAgICAgICBuYW1lID0gdGhpcy5uYW1lU3BhY2UgKyBcIi1cIiArIG5hbWUgKyBcIj1cIjtcbiAgICAgICAgbGV0IGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNhLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIGxldCBjID0gY2FbaV07XG4gICAgICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWUpID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5zdWJzdHJpbmcobmFtZS5sZW5ndGgsYy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBqc29uIG9iamVjdCBmcm9tIGEgY29va2llLCBvciByZXR1cm5zIGFuIGVtcHR5IEpTT05cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBqc29uIHdlIGFyZSBsb2FkaW5nXG4gICAgICogQHJldHVybnMge3t9fSBUaGUgZm91bmQgb2JqZWN0XG4gICAgICovXG4gICAgbG9hZEpTT04obmFtZSkge1xuICAgICAgICBsZXQgY29udGVudCA9IHRoaXMubG9hZENvb2tpZShuYW1lKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgbnVtYmVyIGZyb20gYSBjb29raWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBjb29raWUgd2UgYXJlIGxvb2tpbmcgZm9yXG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB0byByZXR1cm4gaWYgdGhlIGNvb2tpZSB3YXMgbm90IGZvdW5kXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgbG9hZE51bWJlcihuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLmxvYWRDb29raWUobmFtZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuXG4gICAgICAgIHJldHVybiBOdW1iZXIoY29udGVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgYm9vbGVhbiB2YWx1ZSBmcm9tIGEgY29va2llXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgY29va2llIHdlIGFyZSBsb29raW5nIGZvclxuICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgQSBkZWZhdWx0IHRvIHJldHVybiBpZiB0aGUgdmFsdWUgd2FzIHVuZGVmaW5lZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGxvYWRCb29sZWFuIChuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLmxvYWRDb29raWUobmFtZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuXG4gICAgICAgIHJldHVybiBjb250ZW50ID09ICd0cnVlJztcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyeWNlIG9uIDIvOC8xNy5cbiAqL1xuXG5leHBvcnQgY2xhc3MgUHJvZHVjdCB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgcHJvZHVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIHByb2R1Y3RDb250YWluZXIgVGhlIGNvbnRhaW5lciB0aGF0IHdpbGwgaG9sZCBhbGwgZGF0YSBmb3IgdGhpcyBwcm9kdWN0XG4gICAgICogQHBhcmFtIHF1YW50aXR5Q2hhbmdlZENhbGxiYWNrXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKHByb2R1Y3RDb250YWluZXIsIHF1YW50aXR5Q2hhbmdlZENhbGxiYWNrKSB7XG5cbiAgICAgICAgdGhpcy5xdWFudGl0eUNoYW5nZWRDYWxsYmFjayA9IHF1YW50aXR5Q2hhbmdlZENhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMuc2hpcHBpbmdPcHRpb25zID0ge307XG4gICAgICAgIHRoaXMucXVhbnRpdHkgPSAwO1xuICAgICAgICB0aGlzLnRvdGFsID0gMDtcblxuICAgICAgICB0aGlzLmlkID0gcHJvZHVjdENvbnRhaW5lci5kYXRhc2V0WydpZCddO1xuICAgICAgICB0aGlzLmNvc3QgPSBwcm9kdWN0Q29udGFpbmVyLmRhdGFzZXRbJ2Nvc3QnXTtcbiAgICAgICAgdGhpcy53ZWlnaHQgPSBwcm9kdWN0Q29udGFpbmVyLmRhdGFzZXRbJ3dlaWdodCddO1xuXG4gICAgICAgIGxldCBzaGlwcGluZ0RpdnMgPSBwcm9kdWN0Q29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Vhc3lfcHJvZHVjdHMtc2hpcHBpbmdfb3B0aW9uJyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwcGluZ0RpdnMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgbGV0IHNoaXBwaW5nRGl2ID0gc2hpcHBpbmdEaXZzW2ldO1xuXG4gICAgICAgICAgICBsZXQgcmVnaW9uSWQgPSBzaGlwcGluZ0Rpdi5kYXRhc2V0WydyZWdpb25faWQnXTtcblxuICAgICAgICAgICAgbGV0IGtleSA9IHJlZ2lvbklkID8gcmVnaW9uSWQgOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIHRoaXMuc2hpcHBpbmdPcHRpb25zW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgcHJpbWFyeV9yYXRlOiBOdW1iZXIoc2hpcHBpbmdEaXYuZGF0YXNldFsncHJpbWFyeV9yYXRlJ10pLFxuICAgICAgICAgICAgICAgIGFkZF9vbl9yYXRlOiBOdW1iZXIoc2hpcHBpbmdEaXYuZGF0YXNldFsnYWRkX29uX3JhdGUnXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnF1YW50aXR5SW5wdXQgPSBwcm9kdWN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5lYXN5X3Byb2R1Y3RzLXF1YW50aXR5X2lucHV0Jyk7XG4gICAgICAgIHRoaXMudG90YWxEaXNwbGF5ID0gcHJvZHVjdENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZWFzeV9wcm9kdWN0cy1wcm9kdWN0X3RvdGFsX2Rpc3BsYXknKTtcbiAgICAgICAgdGhpcy5wcm9kdWN0VG90YWwgPSBwcm9kdWN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5lYXN5X3Byb2R1Y3RzLXByb2R1Y3RfdG90YWwnKTtcblxuICAgICAgICB0aGlzLnF1YW50aXR5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5xdWFudGl0eUNoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcXVhbnRpdHkgYW5kIHVwZGF0ZXMgdGhlIGNvc3QgdmFyaWFibGVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVhbnRpdHlcbiAgICAgKi9cbiAgICBzZXRRdWFudGl0eSAocXVhbnRpdHkpIHtcbiAgICAgICAgdGhpcy5xdWFudGl0eSA9IHF1YW50aXR5O1xuICAgICAgICB0aGlzLnRvdGFsID0gcXVhbnRpdHkgKiB0aGlzLmNvc3Q7XG5cbiAgICAgICAgaWYgKHRoaXMucXVhbnRpdHkgIT0gdGhpcy5xdWFudGl0eUlucHV0LnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnF1YW50aXR5SW5wdXQudmFsdWUgPSB0aGlzLnF1YW50aXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudG90YWwgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnByb2R1Y3RUb3RhbC5pbm5lckhUTUwgPSB0aGlzLnRvdGFsLnRvRml4ZWQoMik7XG4gICAgICAgICAgICB0aGlzLnRvdGFsRGlzcGxheS5zdHlsZS5kaXNwbGF5ID0gJydcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxEaXNwbGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBxdWFudGl0eSBoYXMgY2hhbmdlZCBpbiB0aGUgaW5wdXQsIGFuZCB3aWxsIHJlY2FsY3VsYXRlIHRoZSB0b3RhbHMgZm9yIHRoaXMgcHJvZHVjdFxuICAgICAqL1xuICAgIHF1YW50aXR5Q2hhbmdlZCAoKSB7XG5cbiAgICAgICAgbGV0IHF1YW50aXR5ID0gTnVtYmVyKHRoaXMucXVhbnRpdHlJbnB1dC52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGlzTmFOKHF1YW50aXR5KSkge1xuICAgICAgICAgICAgcXVhbnRpdHkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRRdWFudGl0eShxdWFudGl0eSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnF1YW50aXR5Q2hhbmdlZENhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMucXVhbnRpdHlDaGFuZ2VkQ2FsbGJhY2sodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXRyaWV2ZXMgdGhlIHNoaXBwaW5nIHJhdGUgZm9yIHRoZSBzcGVjaWZpZWQgcmVnaW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVnaW9uSWRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICByZXRyaWV2ZVNoaXBwaW5nUmF0ZXMgKHJlZ2lvbklkKSB7XG4gICAgICAgIGxldCByYXRlcyA9IHRoaXMuc2hpcHBpbmdPcHRpb25zW3JlZ2lvbklkXTtcblxuICAgICAgICByZXR1cm4gcmF0ZXMgPyByYXRlcyA6IHRoaXMuc2hpcHBpbmdPcHRpb25zWydkZWZhdWx0J107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZSBmdW5jdGlvbiBmb3IgY29tcGFyaW5nIHdlaWdodHMgb2YgdHdvIHByb2R1Y3RzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYSBQcm9kdWN0XG4gICAgICogQHBhcmFtIGIgUHJvZHVjdFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgc3RhdGljIGNvbXBhcmVXZWlnaHRzIChhLCBiKSB7XG4gICAgICAgIGlmIChhLndlaWdodCA8IGIud2VpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEud2VpZ2h0ID4gYi53ZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJ5Y2Ugb24gMi8xNi8xNy5cbiAqL1xuXG5leHBvcnQgY2xhc3MgU2hpcHBpbmdGaWVsZCB7XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBhIGZpZWxkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmllbGQgSFRNTE5vZGVcbiAgICAgKiBAcGFyYW0gY2hhbmdlQ2FsbGJhY2sgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0gY29va2llRmFjdG9yeSBDb29raWVGYWN0b3J5XG4gICAgICogQHBhcmFtIGNvb2tpZUtleSBUaGUga2V5IGZvciB0aGUgc3RvcmVkIGNvb2tpZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChmaWVsZCwgY2hhbmdlQ2FsbGJhY2ssIGNvb2tpZUZhY3RvcnksIGNvb2tpZUtleSkge1xuXG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5jaGFuZ2VDYWxsYmFjayA9IGNoYW5nZUNhbGxiYWNrO1xuICAgICAgICB0aGlzLmNvb2tpZUZhY3RvcnkgPSBjb29raWVGYWN0b3J5O1xuICAgICAgICB0aGlzLmNvb2tpZUtleSA9IGNvb2tpZUtleTtcblxuICAgICAgICB0aGlzLnZhbHVlRW50ZXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlcXVpcmVkID0gdGhpcy5maWVsZC5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJyk7XG5cbiAgICAgICAgdGhpcy5ibGFua1ZhbHVlID0gdGhpcy5maWVsZC5kYXRhc2V0WydibGFua192YWx1ZSddO1xuXG4gICAgICAgIGxldCBzdG9yZWRWYWx1ZSA9IHRoaXMuY29va2llRmFjdG9yeS5sb2FkQ29va2llKHRoaXMuY29va2llS2V5KTtcblxuICAgICAgICBpZiAoc3RvcmVkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBzdG9yZWRWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJbnB1dFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudmVyaWZ5SW5wdXRWYWx1ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB1c2VyIGhhcyBlbnRlcmVkIGEgcHJvcGVyIHZhbHVlXG4gICAgICovXG4gICAgY2hlY2tJbnB1dFZhbHVlICgpIHtcblxuICAgICAgICB0aGlzLnZhbHVlRW50ZXJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLnZhbHVlKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmJsYW5rVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlRW50ZXJlZCA9IHRoaXMuYmxhbmtWYWx1ZSAhPSB0aGlzLmZpZWxkLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUVudGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZG91YmxlIGNoZWNrcyBpbnB1dCB2YWx1ZSB3aGVuIGl0IGNoYW5nZXMgdG8gdmVyaWZ5IGEgdmFsdWUgd2FzIGVudGVyZWQgcHJvcGVybHlcbiAgICAgKi9cbiAgICB2ZXJpZnlJbnB1dFZhbHVlICgpIHtcbiAgICAgICAgdGhpcy5jaGVja0lucHV0VmFsdWUoKTtcblxuICAgICAgICBpZiAodGhpcy52YWx1ZUVudGVyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29va2llRmFjdG9yeS5zYXZlQ29va2llKHRoaXMuY29va2llS2V5LCB0aGlzLmZpZWxkLnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGZpZWxkIGlzIHJlYWR5IGZvciBzdWJtaXNzaW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgY2hlY2tJZkNvbXBsZXRlICgpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1aXJlZCA/IHRoaXMudmFsdWVFbnRlcmVkIDogdHJ1ZTtcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyeWNlIG9uIDIvMTYvMTcuXG4gKi9cblxuaW1wb3J0IHtTaGlwcGluZ0ZpZWxkfSBmcm9tICcuL1NoaXBwaW5nRmllbGQnO1xuXG5leHBvcnQgY2xhc3MgU2hpcHBpbmdNYW5hZ2VyIHtcblxuICAgIC8qKlxuICAgICAqIE1hbmFnZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNoaXBwaW5nIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3JtXG4gICAgICogQHBhcmFtIGFkZHJlc3NDaGFuZ2VDYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEBwYXJhbSBjb29raWVGYWN0b3J5IENvb2tpZUZhY3RvcnlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoZm9ybSwgYWRkcmVzc0NoYW5nZUNhbGxiYWNrLCBjb29raWVGYWN0b3J5KSB7XG5cbiAgICAgICAgU2hpcHBpbmdNYW5hZ2VyLk5BTUVfQ09PS0lFID0gXCJuYW1lXCI7XG4gICAgICAgIFNoaXBwaW5nTWFuYWdlci5BRERSRVNTXzFfQ09PS0lFID0gXCJhZGRyZXNzXzFcIjtcbiAgICAgICAgU2hpcHBpbmdNYW5hZ2VyLkFERFJFU1NfMl9DT09LSUUgPSBcImFkZHJlc3NfMlwiO1xuICAgICAgICBTaGlwcGluZ01hbmFnZXIuQ0lUWV9DT09LSUUgPSBcImNpdHlcIjtcbiAgICAgICAgU2hpcHBpbmdNYW5hZ2VyLlBPU1RBTF9DT0RFX0NPT0tJRSA9IFwicG9zdGFsX2NvZGVcIjtcbiAgICAgICAgU2hpcHBpbmdNYW5hZ2VyLlNUQVRFX0NPT0tJRSA9IFwic3RhdGVcIjtcbiAgICAgICAgU2hpcHBpbmdNYW5hZ2VyLkNPVU5UUllfQ09PS0lFID0gXCJjb3VudHJ5XCI7XG5cbiAgICAgICAgbGV0IG5hbWVJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIiNlYXN5X3Byb2R1Y3RzLW5hbWVcIik7XG4gICAgICAgIGxldCBhZGRyZXNzMUlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiI2Vhc3lfcHJvZHVjdHMtYWRkcmVzc18xXCIpO1xuICAgICAgICBsZXQgYWRkcmVzczJJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIiNlYXN5X3Byb2R1Y3RzLWFkZHJlc3NfMlwiKTtcbiAgICAgICAgbGV0IGNpdHlJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIiNlYXN5X3Byb2R1Y3RzLWNpdHlcIik7XG4gICAgICAgIGxldCBwb3N0YWxDb2RlSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjZWFzeV9wcm9kdWN0cy1wb3N0YWxfY29kZVwiKTtcbiAgICAgICAgbGV0IHN0YXRlSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjZWFzeV9wcm9kdWN0cy1zdGF0ZVwiKTtcbiAgICAgICAgbGV0IGNvdW50cnlTZWxlY3QgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjZWFzeV9wcm9kdWN0cy1jb3VudHJ5XCIpO1xuXG4gICAgICAgIHRoaXMubmFtZUZpZWxkID0gbmV3IFNoaXBwaW5nRmllbGQobmFtZUlucHV0LCBhZGRyZXNzQ2hhbmdlQ2FsbGJhY2ssIGNvb2tpZUZhY3RvcnksIFNoaXBwaW5nTWFuYWdlci5OQU1FX0NPT0tJRSk7XG4gICAgICAgIHRoaXMuYWRkcmVzczFGaWVsZCA9IG5ldyBTaGlwcGluZ0ZpZWxkKGFkZHJlc3MxSW5wdXQsIGFkZHJlc3NDaGFuZ2VDYWxsYmFjaywgY29va2llRmFjdG9yeSwgU2hpcHBpbmdNYW5hZ2VyLkFERFJFU1NfMV9DT09LSUUpO1xuICAgICAgICB0aGlzLmFkZHJlc3MyRmllbGQgPSBuZXcgU2hpcHBpbmdGaWVsZChhZGRyZXNzMklucHV0LCBhZGRyZXNzQ2hhbmdlQ2FsbGJhY2ssIGNvb2tpZUZhY3RvcnksIFNoaXBwaW5nTWFuYWdlci5BRERSRVNTXzJfQ09PS0lFKTtcbiAgICAgICAgdGhpcy5jaXR5RmllbGQgPSBuZXcgU2hpcHBpbmdGaWVsZChjaXR5SW5wdXQsIGFkZHJlc3NDaGFuZ2VDYWxsYmFjaywgY29va2llRmFjdG9yeSwgU2hpcHBpbmdNYW5hZ2VyLkNJVFlfQ09PS0lFKTtcbiAgICAgICAgdGhpcy5wb3N0YWxDb2RlRmllbGQgPSBuZXcgU2hpcHBpbmdGaWVsZChwb3N0YWxDb2RlSW5wdXQsIGFkZHJlc3NDaGFuZ2VDYWxsYmFjaywgY29va2llRmFjdG9yeSwgU2hpcHBpbmdNYW5hZ2VyLlBPU1RBTF9DT0RFX0NPT0tJRSk7XG4gICAgICAgIHRoaXMuc3RhdGVGaWVsZCA9IG5ldyBTaGlwcGluZ0ZpZWxkKHN0YXRlSW5wdXQsIGFkZHJlc3NDaGFuZ2VDYWxsYmFjaywgY29va2llRmFjdG9yeSwgU2hpcHBpbmdNYW5hZ2VyLlNUQVRFX0NPT0tJRSk7XG4gICAgICAgIHRoaXMuY291bnRyeUZpZWxkID0gbmV3IFNoaXBwaW5nRmllbGQoY291bnRyeVNlbGVjdCwgYWRkcmVzc0NoYW5nZUNhbGxiYWNrLCBjb29raWVGYWN0b3J5LCBTaGlwcGluZ01hbmFnZXIuQ09VTlRSWV9DT09LSUUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBhbGwgZmllbGRzIHRvIHNlZSBpZiB0aGUgc2hpcHBpbmcgaXMgcmVhZHkgdG8gZ29cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNoZWNrSWZTaGlwcGluZ0NvbXBsZXRlKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVGaWVsZC5jaGVja0lmQ29tcGxldGUoKSAmJiB0aGlzLmFkZHJlc3MxRmllbGQuY2hlY2tJZkNvbXBsZXRlKClcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmFkZHJlc3MyRmllbGQuY2hlY2tJZkNvbXBsZXRlKCkgJiYgdGhpcy5jaXR5RmllbGQuY2hlY2tJZkNvbXBsZXRlKClcbiAgICAgICAgICAgICAgICAmJiB0aGlzLnBvc3RhbENvZGVGaWVsZC5jaGVja0lmQ29tcGxldGUoKSAmJiB0aGlzLnN0YXRlRmllbGQuY2hlY2tJZkNvbXBsZXRlKClcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmNvdW50cnlGaWVsZC5jaGVja0lmQ29tcGxldGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdW5kbGVzIHRoZSBlbnRpcmUgYWRkcmVzcyBjb21wb25lbnQgaW50byBhIEpTT05cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt7bmFtZTogKiwgYWRkcmVzc0xpbmUxOiAqLCBhZGRyZXNzTGluZTI6ICosIGNpdHk6ICosIHBvc3RhbENvZGU6ICosIGNvdW50cnk6IHtpZDogKiwgbmFtZTogKn19fVxuICAgICAqL1xuICAgIGJ1bmRsZUFkZHJlc3MgKCkge1xuXG4gICAgICAgIGxldCBzZWxlY3RlZE9wdGlvbiA9IHRoaXMuY291bnRyeUZpZWxkLmZpZWxkLm9wdGlvbnNbdGhpcy5jb3VudHJ5RmllbGQuZmllbGQuc2VsZWN0ZWRJbmRleF07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZUZpZWxkLmZpZWxkLnZhbHVlLFxuICAgICAgICAgICAgYWRkcmVzc0xpbmUxOiB0aGlzLmFkZHJlc3MxRmllbGQuZmllbGQudmFsdWUsXG4gICAgICAgICAgICBhZGRyZXNzTGluZTI6IHRoaXMuYWRkcmVzczJGaWVsZC5maWVsZC52YWx1ZSxcbiAgICAgICAgICAgIGNpdHk6IHRoaXMuY2l0eUZpZWxkLmZpZWxkLnZhbHVlLFxuICAgICAgICAgICAgcG9zdGFsQ29kZTogdGhpcy5wb3N0YWxDb2RlRmllbGQuZmllbGQudmFsdWUsXG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZUZpZWxkLmZpZWxkLnZhbHVlLFxuICAgICAgICAgICAgY291bnRyeToge1xuICAgICAgICAgICAgICAgIGlkOiBzZWxlY3RlZE9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBzZWxlY3RlZE9wdGlvbi50ZXh0XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzZWxlY3RlZCByZWdpb24gaWQgb3IgdW5kZWZpbmVkIGlmIG5vbmUgaGFzIGJlZW4gZm91bmRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEJvb2xlYW58dW5kZWZpbmVkXG4gICAgICovXG4gICAgZ2V0UmVnaW9uSWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3VudHJ5RmllbGQuY2hlY2tJZkNvbXBsZXRlKCkgPyB0aGlzLmNvdW50cnlGaWVsZC5maWVsZC52YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyeWNlIG9uIDIvOC8xNy5cbiAqL1xuXG5pbXBvcnQge1Byb2R1Y3R9IGZyb20gJy4vUHJvZHVjdCc7XG5pbXBvcnQge0Nvb2tpZUZhY3Rvcnl9IGZyb20gJy4vQ29va2llRmFjdG9yeSc7XG5pbXBvcnQge1NoaXBwaW5nTWFuYWdlcn0gZnJvbSAnLi9TaGlwcGluZ01hbmFnZXInO1xuXG5leHBvcnQgY2xhc3MgU2hvcHBpbmdDYXJ0IHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGZvciB0aGlzIHNob3BwaW5nIGNhcnQgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9kdWN0c0Zvcm0gdGhlIGRvbSBmb3JtXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKHByb2R1Y3RzRm9ybSkge1xuICAgICAgICBTaG9wcGluZ0NhcnQuUFJPRFVDVFNfQ09PS0lFID0gJ3Byb2R1Y3RfcXVhbnRpdGllcyc7XG5cbiAgICAgICAgdGhpcy5wcm9kdWN0c0Zvcm0gPSBwcm9kdWN0c0Zvcm07XG5cbiAgICAgICAgdGhpcy5zdWJ0b3RhbERpc3BsYXkgPSB0aGlzLnByb2R1Y3RzRm9ybS5xdWVyeVNlbGVjdG9yKCcjZWFzeV9wcm9kdWN0cy1zdWJ0b3RhbCcpO1xuICAgICAgICB0aGlzLnNoaXBwaW5nRGlzcGxheSA9IHRoaXMucHJvZHVjdHNGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNlYXN5X3Byb2R1Y3RzLXNoaXBwaW5nX3RvdGFsJyk7XG4gICAgICAgIHRoaXMudG90YWxEaXNwbGF5ID0gdGhpcy5wcm9kdWN0c0Zvcm0ucXVlcnlTZWxlY3RvcignI2Vhc3lfcHJvZHVjdHMtdG90YWwnKTtcblxuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbiA9IHRoaXMucHJvZHVjdHNGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNlYXN5X3Byb2R1Y3RzLXN1Ym1pdCcpO1xuXG4gICAgICAgIHRoaXMuY29va2llRmFjdG9yeSA9IG5ldyBDb29raWVGYWN0b3J5KCdlYXN5X3Byb2R1Y3RzJyk7XG5cbiAgICAgICAgdGhpcy5wcm9kdWN0UXVhbnRpdGllcyA9IHRoaXMuY29va2llRmFjdG9yeS5sb2FkSlNPTihTaG9wcGluZ0NhcnQuUFJPRFVDVFNfQ09PS0lFKTtcbiAgICAgICAgbGV0IHVuc29ydGVkUHJvZHVjdHMgPSBbXTtcblxuICAgICAgICBsZXQgcHJvZHVjdENvbnRhaW5lcnMgPSB0aGlzLnByb2R1Y3RzRm9ybS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdlYXN5X3Byb2R1Y3RzLXByb2R1Y3QnKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2R1Y3RDb250YWluZXJzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIGxldCBwcm9kdWN0ID0gbmV3IFByb2R1Y3QocHJvZHVjdENvbnRhaW5lcnNbaV0sIHRoaXMucXVhbnRpdHlDaGFuZ2VkLmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICBsZXQgc3RvcmVkUXVhbnRpdHkgPSB0aGlzLnByb2R1Y3RRdWFudGl0aWVzW3Byb2R1Y3QuaWRdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZFF1YW50aXR5ICE9ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgc3RvcmVkUXVhbnRpdHkgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcm9kdWN0LnNldFF1YW50aXR5KHN0b3JlZFF1YW50aXR5KTtcblxuICAgICAgICAgICAgdW5zb3J0ZWRQcm9kdWN0cy5wdXNoKHByb2R1Y3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9kdWN0cyA9IHVuc29ydGVkUHJvZHVjdHMuc29ydChQcm9kdWN0LmNvbXBhcmVXZWlnaHRzKS5yZXZlcnNlKCk7XG5cbiAgICAgICAgdGhpcy5zaGlwcGluZ01hbmFnZXIgPSBuZXcgU2hpcHBpbmdNYW5hZ2VyKHRoaXMucHJvZHVjdHNGb3JtLCB0aGlzLmNoZWNrU2hpcHBpbmdBZGRyZXNzLmJpbmQodGhpcyksIHRoaXMuY29va2llRmFjdG9yeSk7XG5cbiAgICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbHMoKTtcblxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwibG9hZGVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBTdWJtaXRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRoaXMuc2V0dXBTdWJtaXRDYWxsYmFjay5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgY29tcGxldGUgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZXR1cFN1Ym1pdENhbGxiYWNrICgpIHtcblxuICAgICAgICBsZXQgc3VibWl0Q2FsbGJhY2tOYW1lID0gdGhpcy5wcm9kdWN0c0Zvcm0uZGF0YXNldFsnc3VibWl0X2NhbGxiYWNrJ107XG5cbiAgICAgICAgaWYgKHN1Ym1pdENhbGxiYWNrTmFtZSkge1xuICAgICAgICAgICAgbGV0IHN1Ym1pdENhbGxiYWNrID0gZXZhbChzdWJtaXRDYWxsYmFja05hbWUpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN1Ym1pdENhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdENhbGxiYWNrID0gc3VibWl0Q2FsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb2R1Y3RzRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnN1Ym1pdEZvcm0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgdGhlIHN1Ym1pc3Npb24gaWYgYSBjb21wbGV0ZSBjYWxsYmFjayBpcyBzZXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIHN1Ym1pdEZvcm0gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnN1Ym1pdENhbGxiYWNrKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBsZXQgcHJvZHVjdERhdGEgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb2R1Y3RzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgcHJvZHVjdCA9IHRoaXMucHJvZHVjdHNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvZHVjdC5xdWFudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0RGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9kdWN0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHByb2R1Y3QucXVhbnRpdHlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdENhbGxiYWNrKHRoaXMucHJvZHVjdHNGb3JtLCB0aGlzLnRvdGFsLCBwcm9kdWN0RGF0YSwgdGhpcy5zaGlwcGluZ01hbmFnZXIuYnVuZGxlQWRkcmVzcygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrcyB0byBzZWUgaWYgdGhlIHNoaXBwaW5nIGFkZHJlc3MgaGFzIGJlZW4gY2hhbmdlZFxuICAgICAqL1xuICAgIGNoZWNrU2hpcHBpbmdBZGRyZXNzICgpIHtcblxuICAgICAgICBpZiAodGhpcy5zaGlwcGluZ01hbmFnZXIuY2hlY2tJZlNoaXBwaW5nQ29tcGxldGUoKSkge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbHMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hpcHBpbmdEaXNwbGF5LmlubmVySFRNTCA9ICdQbGVhc2UgRW50ZXIgWW91ciBTaGlwcGluZyBBZGRyZXNzJztcbiAgICAgICAgICAgIHRoaXMudG90YWxEaXNwbGF5LmlubmVySFRNTCA9ICdQbGVhc2UgRW50ZXIgWW91ciBTaGlwcGluZyBBZGRyZXNzJztcblxuICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW5ldmVyIGEgcXVhbnRpdHkgaGFzIGNoYW5nZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9kdWN0IFByb2R1Y3RcbiAgICAgKi9cbiAgICBxdWFudGl0eUNoYW5nZWQgKHByb2R1Y3QpIHtcbiAgICAgICAgdGhpcy5wcm9kdWN0UXVhbnRpdGllc1twcm9kdWN0LmlkXSA9IHByb2R1Y3QucXVhbnRpdHk7XG4gICAgICAgIHRoaXMuY29va2llRmFjdG9yeS5zYXZlSlNPTihTaG9wcGluZ0NhcnQuUFJPRFVDVFNfQ09PS0lFLCB0aGlzLnByb2R1Y3RRdWFudGl0aWVzKTtcblxuICAgICAgICB0aGlzLmNhbGN1bGF0ZVRvdGFscygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY2FsY3VsYXRlcyBhbGwgdG90YWxzXG4gICAgICovXG4gICAgY2FsY3VsYXRlVG90YWxzICgpIHtcblxuICAgICAgICBsZXQgc3VidG90YWwgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvZHVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnRvdGFsKz0gdGhpcy5wcm9kdWN0c1tpXS50b3RhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3VidG90YWxEaXNwbGF5LmlubmVySFRNTCA9ICckJyArIHN1YnRvdGFsLnRvRml4ZWQoMik7XG5cbiAgICAgICAgaWYgKHRoaXMuc2hpcHBpbmdNYW5hZ2VyLmNoZWNrSWZTaGlwcGluZ0NvbXBsZXRlKCkpIHtcblxuICAgICAgICAgICAgbGV0IHNoaXBwaW5nVG90YWwgPSAwO1xuICAgICAgICAgICAgbGV0IHJlZ2lvbklkID0gdGhpcy5zaGlwcGluZ01hbmFnZXIuZ2V0UmVnaW9uSWQoKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb2R1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb2R1Y3QgPSB0aGlzLnByb2R1Y3RzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb2R1Y3QucXVhbnRpdHkpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc2hpcHBpbmdSYXRlcyA9IHByb2R1Y3QucmV0cmlldmVTaGlwcGluZ1JhdGVzKHJlZ2lvbklkKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgYWRkT25RdWFudGl0eSA9IHByb2R1Y3QucXVhbnRpdHk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoaXBwaW5nVG90YWwgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcHBpbmdUb3RhbCs9IHNoaXBwaW5nUmF0ZXMucHJpbWFyeV9yYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkT25RdWFudGl0eS0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRPblF1YW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ1RvdGFsKz0gc2hpcHBpbmdSYXRlcy5hZGRfb25fcmF0ZSAqIGFkZE9uUXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2hpcHBpbmdEaXNwbGF5LmlubmVySFRNTCA9ICckJyArIHNoaXBwaW5nVG90YWwudG9GaXhlZCgyKTtcblxuICAgICAgICAgICAgdGhpcy50b3RhbCA9IHN1YnRvdGFsICsgc2hpcHBpbmdUb3RhbDtcblxuICAgICAgICAgICAgdGhpcy50b3RhbERpc3BsYXkuaW5uZXJIVE1MID0gJyQnICsgdGhpcy50b3RhbC50b0ZpeGVkKDIpO1xuXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBicnljZSBvbiAyLzgvMTcuXG4gKi9cblxuaW1wb3J0IHtTaG9wcGluZ0NhcnR9IGZyb20gJy4vY2xhc3Nlcy9TaG9wcGluZ0NhcnQnO1xuXG5sZXQgcHJvZHVjdHNGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vhc3lfcHJvZHVjdHMtcHJvZHVjdHNfbGlzdCcpO1xuXG5pZiAodHlwZW9mIHByb2R1Y3RzRm9ybSAhPSAndW5kZWZpbmVkJykge1xuICAgIG5ldyBTaG9wcGluZ0NhcnQocHJvZHVjdHNGb3JtKTtcbn0iXX0="}