{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/app/classes/CookieFactory.js","assets/js/app/classes/Product.js","assets/js/app/classes/ShippingField.js","assets/js/app/classes/ShippingManager.js","assets/js/app/classes/ShoppingCart.js","assets/js/app/main.js"],"names":[],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by bryce on 2/16/17.\n */\n\nexport class CookieFactory {\n\n    /**\n     * Default constructor, requires a namespace being passed in for prefixing all data\n     *\n     * @param nameSpace\n     */\n    constructor(nameSpace) {\n        this.nameSpace = nameSpace;\n    }\n\n    /**\n     * Saves a cookie to persistent storage\n     *\n     * @param name The key of the cookie\n     * @param value The new value of the cookie\n     */\n    saveCookie(name, value) {\n        document.cookie = this.nameSpace + \"-\" + name + \"=\" + value + \"; path=/\";\n    }\n\n    /**\n     * Saves a json object as a cookie\n     *\n     * @param name The key for the cookie\n     * @param value The json object to save\n     */\n    saveJSON(name, value) {\n\n        this.saveCookie(name, JSON.stringify(value));\n    }\n\n    /**\n     * Loads a cookie out of the document cookie list\n     *\n     * @param name The name of the cookie we are loading\n     * @returns {*} the new object\n     */\n    loadCookie(name) {\n\n        name = this.nameSpace + \"-\" + name + \"=\";\n        let ca = document.cookie.split(';');\n\n        for (let i=0; i<ca.length; i++) {\n\n            let c = ca[i];\n            while (c.charAt(0) == ' ') {\n                c = c.substring(1);\n            }\n\n            if (c.indexOf(name) == 0) {\n                return c.substring(name.length,c.length);\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Parses a json object from a cookie, or returns an empty JSON\n     *\n     * @param name The name of the json we are loading\n     * @returns {{}} The found object\n     */\n    loadJSON(name) {\n        let content = this.loadCookie(name);\n\n        if (typeof content == \"undefined\")\n            return {};\n        else\n            return JSON.parse(content);\n    }\n\n    /**\n     * Parses a number from a cookie\n     *\n     * @param name The cookie we are looking for\n     * @param defaultValue The default to return if the cookie was not found\n     * @returns {*}\n     */\n    loadNumber(name, defaultValue) {\n        let content = this.loadCookie(name);\n\n        if (typeof content == \"undefined\")\n            return defaultValue;\n\n        return Number(content);\n    }\n\n    /**\n     * Parses a boolean value from a cookie\n     *\n     * @param name The cookie we are looking for\n     * @param defaultValue A default to return if the value was undefined\n     * @returns {*}\n     */\n    loadBoolean (name, defaultValue) {\n        let content = this.loadCookie(name);\n\n        if (typeof content == \"undefined\")\n            return defaultValue;\n\n        return content == 'true';\n    }\n}","/**\n * Created by bryce on 2/8/17.\n */\n\nexport class Product {\n\n    /**\n     * Creates a new instance of a product\n     *\n     * @param productContainer The container that will hold all data for this product\n     * @param quantityChangedCallback\n     */\n    constructor (productContainer, quantityChangedCallback) {\n\n        this.quantityChangedCallback = quantityChangedCallback;\n\n        this.shippingOptions = {};\n        this.quantity = 0;\n        this.total = 0;\n\n        this.id = productContainer.dataset['id'];\n        this.cost = productContainer.dataset['cost'];\n        this.weight = productContainer.dataset['weight'];\n\n        let shippingDivs = productContainer.getElementsByClassName('easy_products-shipping_option');\n\n        for (let i = 0; i < shippingDivs.length; i++) {\n\n            let shippingDiv = shippingDivs[i];\n\n            let regionId = shippingDiv.dataset['region_id'];\n\n            let key = regionId ? regionId : 'default';\n\n            this.shippingOptions[key] = {\n                primary_rate: Number(shippingDiv.dataset['primary_rate']),\n                add_on_rate: Number(shippingDiv.dataset['add_on_rate'])\n            };\n        }\n\n        this.quantityInput = productContainer.querySelector('.easy_products-quantity_input');\n        this.totalDisplay = productContainer.querySelector('.easy_products-product_total_display');\n        this.productTotal = productContainer.querySelector('.easy_products-product_total');\n\n        this.quantityInput.addEventListener('change', this.quantityChanged.bind(this));\n    }\n\n    /**\n     * Sets the quantity and updates the cost variables\n     *\n     * @param quantity\n     */\n    setQuantity (quantity) {\n        this.quantity = quantity;\n        this.total = quantity * this.cost;\n\n        if (this.quantity != this.quantityInput.value) {\n            this.quantityInput.value = this.quantity;\n        }\n\n        if (this.total > 0) {\n            this.productTotal.innerHTML = this.total.toFixed(2);\n            this.totalDisplay.style.display = ''\n        }\n        else {\n            this.totalDisplay.style.display = 'none';\n        }\n    }\n\n    /**\n     * Called when quantity has changed in the input, and will recalculate the totals for this product\n     */\n    quantityChanged () {\n\n        let quantity = Number(this.quantityInput.value);\n\n        if (isNaN(quantity)) {\n            quantity = 0;\n        }\n\n        this.setQuantity(quantity);\n\n        if (typeof this.quantityChangedCallback == 'function') {\n            this.quantityChangedCallback(this);\n        }\n    }\n\n    /**\n     * retrieves the shipping rate for the specified region\n     *\n     * @param regionId\n     * @returns {*}\n     */\n    retrieveShippingRates (regionId) {\n        let rates = this.shippingOptions[regionId];\n\n        return rates ? rates : this.shippingOptions['default'];\n    }\n\n    /**\n     * Compare function for comparing weights of two products\n     *\n     * @param a Product\n     * @param b Product\n     * @returns {number}\n     */\n    static compareWeights (a, b) {\n        if (a.weight < b.weight) {\n            return -1;\n        }\n        if (a.weight > b.weight) {\n            return 1;\n        }\n        return 0;\n    }\n}","/**\n * Created by bryce on 2/16/17.\n */\n\nexport class ShippingField {\n\n    /**\n     * Default constructor for a field\n     *\n     * @param field HTMLNode\n     * @param changeCallback Function\n     * @param cookieFactory CookieFactory\n     * @param cookieKey The key for the stored cookie\n     */\n    constructor (field, changeCallback, cookieFactory, cookieKey) {\n\n        this.field = field;\n        this.changeCallback = changeCallback;\n        this.cookieFactory = cookieFactory;\n        this.cookieKey = cookieKey;\n\n        this.valueEntered = false;\n        this.required = this.field.hasAttribute('required');\n\n        this.blankValue = this.field.dataset['blank_value'];\n\n        let storedValue = this.cookieFactory.loadCookie(this.cookieKey);\n\n        if (storedValue) {\n            this.field.value = storedValue;\n            this.checkInputValue();\n        }\n\n        this.field.addEventListener('change', this.verifyInputValue.bind(this));\n    }\n\n    /**\n     * Determines if the user has entered a proper value\n     */\n    checkInputValue () {\n\n        this.valueEntered = false;\n\n        if (this.field.value) {\n\n            if (this.blankValue) {\n                this.valueEntered = this.blankValue != this.field.value;\n            }\n            else {\n                this.valueEntered = true;\n            }\n        }\n    }\n\n    /**\n     * double checks input value when it changes to verify a value was entered properly\n     */\n    verifyInputValue () {\n        this.checkInputValue();\n\n        if (this.valueEntered) {\n            this.cookieFactory.saveCookie(this.cookieKey, this.field.value);\n            this.changeCallback();\n        }\n    }\n\n    /**\n     * Checks whether or not this field is ready for submission\n     *\n     * @returns Boolean\n     */\n    checkIfComplete () {\n\n        return this.required ? this.valueEntered : true;\n    }\n}","/**\n * Created by bryce on 2/16/17.\n */\n\nimport {ShippingField} from './ShippingField';\n\nexport class ShippingManager {\n\n    /**\n     * Manages the current state of the shipping options\n     *\n     * @param form\n     * @param addressChangeCallback function\n     * @param cookieFactory CookieFactory\n     */\n    constructor (form, addressChangeCallback, cookieFactory) {\n\n        ShippingManager.NAME_COOKIE = \"name\";\n        ShippingManager.ADDRESS_1_COOKIE = \"address_1\";\n        ShippingManager.ADDRESS_2_COOKIE = \"address_2\";\n        ShippingManager.CITY_COOKIE = \"city\";\n        ShippingManager.POSTAL_CODE_COOKIE = \"postal_code\";\n        ShippingManager.STATE_COOKIE = \"state\";\n        ShippingManager.COUNTRY_COOKIE = \"country\";\n\n        let nameInput = form.querySelector(\"#easy_products-name\");\n        let address1Input = form.querySelector(\"#easy_products-address_1\");\n        let address2Input = form.querySelector(\"#easy_products-address_2\");\n        let cityInput = form.querySelector(\"#easy_products-city\");\n        let postalCodeInput = form.querySelector(\"#easy_products-postal_code\");\n        let stateInput = form.querySelector(\"#easy_products-state\");\n        let countrySelect = form.querySelector(\"#easy_products-country\");\n\n        this.nameField = new ShippingField(nameInput, addressChangeCallback, cookieFactory, ShippingManager.NAME_COOKIE);\n        this.address1Field = new ShippingField(address1Input, addressChangeCallback, cookieFactory, ShippingManager.ADDRESS_1_COOKIE);\n        this.address2Field = new ShippingField(address2Input, addressChangeCallback, cookieFactory, ShippingManager.ADDRESS_2_COOKIE);\n        this.cityField = new ShippingField(cityInput, addressChangeCallback, cookieFactory, ShippingManager.CITY_COOKIE);\n        this.postalCodeField = new ShippingField(postalCodeInput, addressChangeCallback, cookieFactory, ShippingManager.POSTAL_CODE_COOKIE);\n        this.stateField = new ShippingField(stateInput, addressChangeCallback, cookieFactory, ShippingManager.STATE_COOKIE);\n        this.countryField = new ShippingField(countrySelect, addressChangeCallback, cookieFactory, ShippingManager.COUNTRY_COOKIE);\n    }\n\n    /**\n     * Checks all fields to see if the shipping is ready to go\n     *\n     * @returns {Boolean}\n     */\n    checkIfShippingComplete() {\n\n        return this.nameField.checkIfComplete() && this.address1Field.checkIfComplete()\n                && this.address2Field.checkIfComplete() && this.cityField.checkIfComplete()\n                && this.postalCodeField.checkIfComplete() && this.stateField.checkIfComplete()\n                && this.countryField.checkIfComplete();\n    }\n\n    /**\n     * Bundles the entire address component into a JSON\n     *\n     * @returns {{name: *, addressLine1: *, addressLine2: *, city: *, postalCode: *, country: {id: *, name: *}}}\n     */\n    bundleAddress () {\n\n        let selectedOption = this.countryField.field.options[this.countryField.field.selectedIndex];\n\n        return {\n            name: this.nameField.field.value,\n            addressLine1: this.address1Field.field.value,\n            addressLine2: this.address2Field.field.value,\n            city: this.cityField.field.value,\n            postalCode: this.postalCodeField.field.value,\n            state: this.stateField.field.value,\n            country: {\n                id: selectedOption.value,\n                name: selectedOption.text\n            }\n        }\n    }\n\n    /**\n     * Gets the selected region id or undefined if none has been found\n     *\n     * @returns Boolean|undefined\n     */\n    getRegionId () {\n        return this.countryField.checkIfComplete() ? this.countryField.field.value : undefined;\n    }\n}","/**\n * Created by bryce on 2/8/17.\n */\n\nimport {Product} from './Product';\nimport {CookieFactory} from './CookieFactory';\nimport {ShippingManager} from './ShippingManager';\n\nexport class ShoppingCart {\n\n    /**\n     * Constructor for this shopping cart instance\n     *\n     * @param productsForm the dom form\n     */\n    constructor (productsForm) {\n        ShoppingCart.PRODUCTS_COOKIE = 'product_quantities';\n\n        this.productsForm = productsForm;\n\n        this.subtotalDisplay = this.productsForm.querySelector('#easy_products-subtotal');\n        this.shippingDisplay = this.productsForm.querySelector('#easy_products-shipping_total');\n        this.totalDisplay = this.productsForm.querySelector('#easy_products-total');\n\n        this.submitButton = this.productsForm.querySelector('#easy_products-submit');\n\n        this.cookieFactory = new CookieFactory('easy_products');\n\n        this.productQuantities = this.cookieFactory.loadJSON(ShoppingCart.PRODUCTS_COOKIE);\n        let unsortedProducts = [];\n\n        let productContainers = this.productsForm.getElementsByClassName('easy_products-product');\n\n        for (let i = 0; i < productContainers.length; i++) {\n\n            let product = new Product(productContainers[i], this.quantityChanged.bind(this));\n\n            let storedQuantity = this.productQuantities[product.id];\n\n            if (typeof storedQuantity != 'number') {\n                storedQuantity = 0;\n            }\n\n            product.setQuantity(storedQuantity);\n\n            unsortedProducts.push(product);\n        }\n\n        this.products = unsortedProducts.sort(Product.compareWeights).reverse();\n\n        this.shippingManager = new ShippingManager(this.productsForm, this.checkShippingAddress.bind(this), this.cookieFactory);\n\n        this.calculateTotals();\n\n        if (document.readyState === \"complete\" || document.readyState === \"loaded\") {\n            this.setupSubmitCallback();\n        }\n        else {\n            document.addEventListener('DOMContentLoaded', this.setupSubmitCallback.bind(this));\n        }\n\n    }\n\n    /**\n     * Sets up the complete callback\n     */\n    setupSubmitCallback () {\n\n        let submitCallbackName = this.productsForm.dataset['submit_callback'];\n\n        if (submitCallbackName) {\n            let submitCallback = eval(submitCallbackName);\n\n            if (typeof submitCallback == 'function') {\n                this.submitCallback = submitCallback;\n            }\n        }\n\n        this.productsForm.addEventListener('submit', this.submitForm.bind(this));\n    }\n\n    /**\n     * Stops the submission if a complete callback is set\n     *\n     * @param event\n     */\n    submitForm (event) {\n        if (this.submitCallback) {\n            event.preventDefault();\n\n            let productData = [];\n\n            for (let i = 0; i < this.products.length; i++) {\n\n                let product = this.products[i];\n\n                if (product.quantity) {\n                    productData.push({\n                        id: product.id,\n                        quantity: product.quantity\n                    });\n                }\n            }\n\n            this.submitCallback(this.total, productData, this.shippingManager.bundleAddress());\n        }\n    }\n\n    /**\n     * checks to see if the shipping address has been changed\n     */\n    checkShippingAddress () {\n\n        if (this.shippingManager.checkIfShippingComplete()) {\n            this.calculateTotals();\n        }\n        else {\n            this.shippingDisplay.innerHTML = 'Please Enter Your Shipping Address';\n            this.totalDisplay.innerHTML = 'Please Enter Your Shipping Address';\n\n            this.submitButton.disabled = true;\n        }\n    }\n\n    /**\n     * Called whenever a quantity has changed\n     *\n     * @param product Product\n     */\n    quantityChanged (product) {\n        this.productQuantities[product.id] = product.quantity;\n        this.cookieFactory.saveJSON(ShoppingCart.PRODUCTS_COOKIE, this.productQuantities);\n\n        this.calculateTotals();\n    }\n\n    /**\n     * Recalculates all totals\n     */\n    calculateTotals () {\n\n        let subtotal = 0;\n        for (let i = 0; i < this.products.length; i++) {\n            subtotal+= this.products[i].total;\n        }\n\n        this.subtotalDisplay.innerHTML = '$' + subtotal.toFixed(2);\n\n        if (this.shippingManager.checkIfShippingComplete()) {\n\n            let shippingTotal = 0;\n            let regionId = this.shippingManager.getRegionId();\n\n            for (let i = 0; i < this.products.length; i++) {\n                let product = this.products[i];\n\n                if (product.quantity) {\n\n                    let shippingRates = product.retrieveShippingRates(regionId);\n\n                    let addOnQuantity = product.quantity;\n\n                    if (shippingTotal == 0) {\n                        shippingTotal+= shippingRates.primary_rate;\n                        addOnQuantity--;\n                    }\n                    if (addOnQuantity) {\n                        shippingTotal+= shippingRates.add_on_rate * addOnQuantity;\n                    }\n                }\n            }\n\n            this.shippingDisplay.innerHTML = '$' + shippingTotal.toFixed(2);\n\n            this.total = subtotal + shippingTotal;\n\n            this.totalDisplay.innerHTML = '$' + this.total.toFixed(2);\n\n            this.submitButton.disabled = false;\n        }\n    }\n}","/**\n * Created by bryce on 2/8/17.\n */\n\nimport {ShoppingCart} from './classes/ShoppingCart';\n\nlet productsForm = document.getElementById('easy_products-products_list');\n\nif (typeof productsForm != 'undefined') {\n    new ShoppingCart(productsForm);\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}