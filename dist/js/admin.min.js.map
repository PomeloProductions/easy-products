{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/admin/classes/Components/ShippingRate.js","assets/js/admin/classes/Components/ShippingRateTemplate.js","assets/js/admin/classes/ProductsList.js","assets/js/admin/classes/ShippingRatesManager.js","assets/js/admin/main.js","node_modules/jquery-sortable/source/js/jquery-sortable.js"],"names":[],"mappings":"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":"admin.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by bryce on 3/17/17.\n */\n\nexport class ShippingRate {\n\n    /**\n     * Creates a new instance of a shipping rate\n     *\n     * @param domNode Node\n     */\n    constructor (domNode) {\n\n        this.node = domNode;\n\n        let removeButton = this.node.querySelector('.remote_rate');\n\n        removeButton.addEventListener('click', this.remove.bind(this));\n    }\n\n    /**\n     * Removes this rate from the page\n     *\n     * @param event Event\n     */\n    remove (event) {\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.node.parentNode.removeChild(this.node);\n    }\n\n}","/**\n * Created by bryce on 3/17/17.\n */\n\nexport class ShippingRateTemplate {\n\n    /**\n     * Creates a new template holder for easily duplicating the shipping rate template\n     *\n     * @param templateContent Node\n     */\n    constructor(templateContent) {\n\n        this.template = templateContent.cloneNode(true);\n\n        let regionSelect = this.template.querySelector('.shipping_rate-region');\n\n        let options = regionSelect.getElementsByTagName('option');\n\n        for (let i = 0; i < options.length; i++) {\n            if (i != 0) {\n                options[i].removeAttribute('selected');\n            }\n        }\n\n        let inputs = this.template.getElementsByTagName('input');\n\n        for (let i = 0; i < inputs.length; i++) {\n            inputs[i].value = '';\n        }\n\n    }\n\n    /**\n     * Clones the template, so a new node can be added to the page\n     *\n     * @returns {Node}\n     */\n    cloneTemplate () {\n        return this.template.cloneNode(true);\n    }\n}","/**\n * Created by bryce on 3/17/17.\n */\n\nimport 'jquery-sortable';\n\nexport class ProductsList {\n\n    constructor(productsTable) {\n\n        this.products = document.getElementsByClassName('crud_rows');\n        jQuery(productsTable).find('tbody').sortable({\n            itemSelector: 'tr'\n        });\n\n        jQuery(productsTable).find('tr').on('mouseup', this.reorderedProducts.bind(this));\n        jQuery(productsTable).find('tr').on('touchend', this.reorderedProducts.bind(this));\n    }\n\n    /**\n     * Reorders the products on the server\n     */\n    reorderedProducts () {\n\n        setTimeout(function() {\n            let newOrder = [];\n\n            for (let i = 0; i < this.products.length; i++) {\n                newOrder.push(this.products[i].dataset['id']);\n            }\n\n            console.log(newOrder);\n            jQuery.ajax('/wp-admin/admin-ajax.php', {\n                method: 'POST',\n                data: {\n                    action: 'reorder_products',\n                    order: newOrder\n                }\n            });\n        }.bind(this), 10);\n    }\n}","/**\n * Created by bryce on 3/17/17.\n */\n\nimport {ShippingRate} from './Components/ShippingRate';\nimport {ShippingRateTemplate} from './Components/ShippingRateTemplate';\n\nexport class ShippingRatesManager {\n\n    /**\n     * Creates a new shipping rate manager for keeping track of all shipping rates\n     *\n     * @param shippingRatesList Node\n     */\n    constructor (shippingRatesList) {\n\n        this.shippingRateList = shippingRatesList;\n\n        let shippingRates = document.getElementsByClassName('shipping_rate_specific');\n\n        if (!shippingRates.length) {\n            throw error('No shipping rates found on this page');\n        }\n\n        for (let i = 0; i < shippingRates.length; i++) {\n            new ShippingRate(shippingRates[i]);\n        }\n\n        this.template = new ShippingRateTemplate(shippingRates[0]);\n\n        let addButton = document.querySelector('#btn_add_shipping_rate');\n\n        addButton.addEventListener('click', this.addShippingRate.bind(this));\n    }\n\n    /**\n     * Adds a shipping rate to the page\n     *\n     * @param event Event\n     */\n    addShippingRate (event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        let newNode = this.template.cloneTemplate();\n\n        new ShippingRate(newNode);\n\n        this.shippingRateList.appendChild(newNode);\n    }\n}","/**\r\n * Created by bryce on 2/8/17.\r\n */\r\nimport {ShippingRatesManager} from './classes/ShippingRatesManager';\r\nimport {ProductsList} from './classes/ProductsList';\r\n\r\njQuery(document).ready(function($){\r\n    $('#upload-btn').click(function(e) {\r\n        e.preventDefault();\r\n        var image = wp.media({\r\n            title: 'Upload Image',\r\n            // mutiple: true if you want to upload multiple files at once\r\n            multiple: false\r\n        }).open()\r\n            .on('select', function(e){\r\n                // This will return the selected image from the Media Uploader, the result is an object\r\n                var uploaded_image = image.state().get('selection').first();\r\n                // We convert uploaded_image to a JSON object to make accessing it easier\r\n                // Output to the console uploaded_image\r\n                console.log(uploaded_image);\r\n                var image_url = uploaded_image.toJSON().url;\r\n                // Let's assign the url value to the input field\r\n                $('#image_url').val(image_url);\r\n            });\r\n    });\r\n\r\n    let shippingRatesList = document.getElementById('shipping_rates');\r\n\r\n    if (shippingRatesList != null) {\r\n        new ShippingRatesManager(shippingRatesList);\r\n    }\r\n\r\n    let productsList = document.getElementById('admin-wordwrap_crud');\r\n\r\n    if (typeof productsList != 'undefined') {\r\n        new ProductsList(productsList);\r\n    }\r\n});","/* ===================================================\r\n *  jquery-sortable.js v0.9.13\r\n *  http://johnny.github.com/jquery-sortable/\r\n * ===================================================\r\n *  Copyright (c) 2012 Jonas von Andrian\r\n *  All rights reserved.\r\n *\r\n *  Redistribution and use in source and binary forms, with or without\r\n *  modification, are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *  * The name of the author may not be used to endorse or promote products\r\n *    derived from this software without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n *  DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n * ========================================================== */\r\n\r\n!function ( $, window, pluginName, undefined){\r\n  var containerDefaults = {\r\n    // If true, items can be dragged from this container\r\n    drag: true,\r\n    // If true, items can be droped onto this container\r\n    drop: true,\r\n    // Exclude items from being draggable, if the\r\n    // selector matches the item\r\n    exclude: \"\",\r\n    // If true, search for nested containers within an item.If you nest containers,\r\n    // either the original selector with which you call the plugin must only match the top containers,\r\n    // or you need to specify a group (see the bootstrap nav example)\r\n    nested: true,\r\n    // If true, the items are assumed to be arranged vertically\r\n    vertical: true\r\n  }, // end container defaults\r\n  groupDefaults = {\r\n    // This is executed after the placeholder has been moved.\r\n    // $closestItemOrContainer contains the closest item, the placeholder\r\n    // has been put at or the closest empty Container, the placeholder has\r\n    // been appended to.\r\n    afterMove: function ($placeholder, container, $closestItemOrContainer) {\r\n    },\r\n    // The exact css path between the container and its items, e.g. \"> tbody\"\r\n    containerPath: \"\",\r\n    // The css selector of the containers\r\n    containerSelector: \"ol, ul\",\r\n    // Distance the mouse has to travel to start dragging\r\n    distance: 0,\r\n    // Time in milliseconds after mousedown until dragging should start.\r\n    // This option can be used to prevent unwanted drags when clicking on an element.\r\n    delay: 0,\r\n    // The css selector of the drag handle\r\n    handle: \"\",\r\n    // The exact css path between the item and its subcontainers.\r\n    // It should only match the immediate items of a container.\r\n    // No item of a subcontainer should be matched. E.g. for ol>div>li the itemPath is \"> div\"\r\n    itemPath: \"\",\r\n    // The css selector of the items\r\n    itemSelector: \"li\",\r\n    // The class given to \"body\" while an item is being dragged\r\n    bodyClass: \"dragging\",\r\n    // The class giving to an item while being dragged\r\n    draggedClass: \"dragged\",\r\n    // Check if the dragged item may be inside the container.\r\n    // Use with care, since the search for a valid container entails a depth first search\r\n    // and may be quite expensive.\r\n    isValidTarget: function ($item, container) {\r\n      return true\r\n    },\r\n    // Executed before onDrop if placeholder is detached.\r\n    // This happens if pullPlaceholder is set to false and the drop occurs outside a container.\r\n    onCancel: function ($item, container, _super, event) {\r\n    },\r\n    // Executed at the beginning of a mouse move event.\r\n    // The Placeholder has not been moved yet.\r\n    onDrag: function ($item, position, _super, event) {\r\n      $item.css(position)\r\n    },\r\n    // Called after the drag has been started,\r\n    // that is the mouse button is being held down and\r\n    // the mouse is moving.\r\n    // The container is the closest initialized container.\r\n    // Therefore it might not be the container, that actually contains the item.\r\n    onDragStart: function ($item, container, _super, event) {\r\n      $item.css({\r\n        height: $item.outerHeight(),\r\n        width: $item.outerWidth()\r\n      })\r\n      $item.addClass(container.group.options.draggedClass)\r\n      $(\"body\").addClass(container.group.options.bodyClass)\r\n    },\r\n    // Called when the mouse button is being released\r\n    onDrop: function ($item, container, _super, event) {\r\n      $item.removeClass(container.group.options.draggedClass).removeAttr(\"style\")\r\n      $(\"body\").removeClass(container.group.options.bodyClass)\r\n    },\r\n    // Called on mousedown. If falsy value is returned, the dragging will not start.\r\n    // Ignore if element clicked is input, select or textarea\r\n    onMousedown: function ($item, _super, event) {\r\n      if (!event.target.nodeName.match(/^(input|select|textarea)$/i)) {\r\n        event.preventDefault()\r\n        return true\r\n      }\r\n    },\r\n    // The class of the placeholder (must match placeholder option markup)\r\n    placeholderClass: \"placeholder\",\r\n    // Template for the placeholder. Can be any valid jQuery input\r\n    // e.g. a string, a DOM element.\r\n    // The placeholder must have the class \"placeholder\"\r\n    placeholder: '<li class=\"placeholder\"></li>',\r\n    // If true, the position of the placeholder is calculated on every mousemove.\r\n    // If false, it is only calculated when the mouse is above a container.\r\n    pullPlaceholder: true,\r\n    // Specifies serialization of the container group.\r\n    // The pair $parent/$children is either container/items or item/subcontainers.\r\n    serialize: function ($parent, $children, parentIsContainer) {\r\n      var result = $.extend({}, $parent.data())\r\n\r\n      if(parentIsContainer)\r\n        return [$children]\r\n      else if ($children[0]){\r\n        result.children = $children\r\n      }\r\n\r\n      delete result.subContainers\r\n      delete result.sortable\r\n\r\n      return result\r\n    },\r\n    // Set tolerance while dragging. Positive values decrease sensitivity,\r\n    // negative values increase it.\r\n    tolerance: 0\r\n  }, // end group defaults\r\n  containerGroups = {},\r\n  groupCounter = 0,\r\n  emptyBox = {\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right:0\r\n  },\r\n  eventNames = {\r\n    start: \"touchstart.sortable mousedown.sortable\",\r\n    drop: \"touchend.sortable touchcancel.sortable mouseup.sortable\",\r\n    drag: \"touchmove.sortable mousemove.sortable\",\r\n    scroll: \"scroll.sortable\"\r\n  },\r\n  subContainerKey = \"subContainers\"\r\n\r\n  /*\r\n   * a is Array [left, right, top, bottom]\r\n   * b is array [left, top]\r\n   */\r\n  function d(a,b) {\r\n    var x = Math.max(0, a[0] - b[0], b[0] - a[1]),\r\n    y = Math.max(0, a[2] - b[1], b[1] - a[3])\r\n    return x+y;\r\n  }\r\n\r\n  function setDimensions(array, dimensions, tolerance, useOffset) {\r\n    var i = array.length,\r\n    offsetMethod = useOffset ? \"offset\" : \"position\"\r\n    tolerance = tolerance || 0\r\n\r\n    while(i--){\r\n      var el = array[i].el ? array[i].el : $(array[i]),\r\n      // use fitting method\r\n      pos = el[offsetMethod]()\r\n      pos.left += parseInt(el.css('margin-left'), 10)\r\n      pos.top += parseInt(el.css('margin-top'),10)\r\n      dimensions[i] = [\r\n        pos.left - tolerance,\r\n        pos.left + el.outerWidth() + tolerance,\r\n        pos.top - tolerance,\r\n        pos.top + el.outerHeight() + tolerance\r\n      ]\r\n    }\r\n  }\r\n\r\n  function getRelativePosition(pointer, element) {\r\n    var offset = element.offset()\r\n    return {\r\n      left: pointer.left - offset.left,\r\n      top: pointer.top - offset.top\r\n    }\r\n  }\r\n\r\n  function sortByDistanceDesc(dimensions, pointer, lastPointer) {\r\n    pointer = [pointer.left, pointer.top]\r\n    lastPointer = lastPointer && [lastPointer.left, lastPointer.top]\r\n\r\n    var dim,\r\n    i = dimensions.length,\r\n    distances = []\r\n\r\n    while(i--){\r\n      dim = dimensions[i]\r\n      distances[i] = [i,d(dim,pointer), lastPointer && d(dim, lastPointer)]\r\n    }\r\n    distances = distances.sort(function  (a,b) {\r\n      return b[1] - a[1] || b[2] - a[2] || b[0] - a[0]\r\n    })\r\n\r\n    // last entry is the closest\r\n    return distances\r\n  }\r\n\r\n  function ContainerGroup(options) {\r\n    this.options = $.extend({}, groupDefaults, options)\r\n    this.containers = []\r\n\r\n    if(!this.options.rootGroup){\r\n      this.scrollProxy = $.proxy(this.scroll, this)\r\n      this.dragProxy = $.proxy(this.drag, this)\r\n      this.dropProxy = $.proxy(this.drop, this)\r\n      this.placeholder = $(this.options.placeholder)\r\n\r\n      if(!options.isValidTarget)\r\n        this.options.isValidTarget = undefined\r\n    }\r\n  }\r\n\r\n  ContainerGroup.get = function  (options) {\r\n    if(!containerGroups[options.group]) {\r\n      if(options.group === undefined)\r\n        options.group = groupCounter ++\r\n\r\n      containerGroups[options.group] = new ContainerGroup(options)\r\n    }\r\n\r\n    return containerGroups[options.group]\r\n  }\r\n\r\n  ContainerGroup.prototype = {\r\n    dragInit: function  (e, itemContainer) {\r\n      this.$document = $(itemContainer.el[0].ownerDocument)\r\n\r\n      // get item to drag\r\n      var closestItem = $(e.target).closest(this.options.itemSelector);\r\n      // using the length of this item, prevents the plugin from being started if there is no handle being clicked on.\r\n      // this may also be helpful in instantiating multidrag.\r\n      if (closestItem.length) {\r\n        this.item = closestItem;\r\n        this.itemContainer = itemContainer;\r\n        if (this.item.is(this.options.exclude) || !this.options.onMousedown(this.item, groupDefaults.onMousedown, e)) {\r\n            return;\r\n        }\r\n        this.setPointer(e);\r\n        this.toggleListeners('on');\r\n        this.setupDelayTimer();\r\n        this.dragInitDone = true;\r\n      }\r\n    },\r\n    drag: function  (e) {\r\n      if(!this.dragging){\r\n        if(!this.distanceMet(e) || !this.delayMet)\r\n          return\r\n\r\n        this.options.onDragStart(this.item, this.itemContainer, groupDefaults.onDragStart, e)\r\n        this.item.before(this.placeholder)\r\n        this.dragging = true\r\n      }\r\n\r\n      this.setPointer(e)\r\n      // place item under the cursor\r\n      this.options.onDrag(this.item,\r\n                          getRelativePosition(this.pointer, this.item.offsetParent()),\r\n                          groupDefaults.onDrag,\r\n                          e)\r\n\r\n      var p = this.getPointer(e),\r\n      box = this.sameResultBox,\r\n      t = this.options.tolerance\r\n\r\n      if(!box || box.top - t > p.top || box.bottom + t < p.top || box.left - t > p.left || box.right + t < p.left)\r\n        if(!this.searchValidTarget()){\r\n          this.placeholder.detach()\r\n          this.lastAppendedItem = undefined\r\n        }\r\n    },\r\n    drop: function  (e) {\r\n      this.toggleListeners('off')\r\n\r\n      this.dragInitDone = false\r\n\r\n      if(this.dragging){\r\n        // processing Drop, check if placeholder is detached\r\n        if(this.placeholder.closest(\"html\")[0]){\r\n          this.placeholder.before(this.item).detach()\r\n        } else {\r\n          this.options.onCancel(this.item, this.itemContainer, groupDefaults.onCancel, e)\r\n        }\r\n        this.options.onDrop(this.item, this.getContainer(this.item), groupDefaults.onDrop, e)\r\n\r\n        // cleanup\r\n        this.clearDimensions()\r\n        this.clearOffsetParent()\r\n        this.lastAppendedItem = this.sameResultBox = undefined\r\n        this.dragging = false\r\n      }\r\n    },\r\n    searchValidTarget: function  (pointer, lastPointer) {\r\n      if(!pointer){\r\n        pointer = this.relativePointer || this.pointer\r\n        lastPointer = this.lastRelativePointer || this.lastPointer\r\n      }\r\n\r\n      var distances = sortByDistanceDesc(this.getContainerDimensions(),\r\n                                         pointer,\r\n                                         lastPointer),\r\n      i = distances.length\r\n\r\n      while(i--){\r\n        var index = distances[i][0],\r\n        distance = distances[i][1]\r\n\r\n        if(!distance || this.options.pullPlaceholder){\r\n          var container = this.containers[index]\r\n          if(!container.disabled){\r\n            if(!this.$getOffsetParent()){\r\n              var offsetParent = container.getItemOffsetParent()\r\n              pointer = getRelativePosition(pointer, offsetParent)\r\n              lastPointer = getRelativePosition(lastPointer, offsetParent)\r\n            }\r\n            if(container.searchValidTarget(pointer, lastPointer))\r\n              return true\r\n          }\r\n        }\r\n      }\r\n      if(this.sameResultBox)\r\n        this.sameResultBox = undefined\r\n    },\r\n    movePlaceholder: function  (container, item, method, sameResultBox) {\r\n      var lastAppendedItem = this.lastAppendedItem\r\n      if(!sameResultBox && lastAppendedItem && lastAppendedItem[0] === item[0])\r\n        return;\r\n\r\n      item[method](this.placeholder)\r\n      this.lastAppendedItem = item\r\n      this.sameResultBox = sameResultBox\r\n      this.options.afterMove(this.placeholder, container, item)\r\n    },\r\n    getContainerDimensions: function  () {\r\n      if(!this.containerDimensions)\r\n        setDimensions(this.containers, this.containerDimensions = [], this.options.tolerance, !this.$getOffsetParent())\r\n      return this.containerDimensions\r\n    },\r\n    getContainer: function  (element) {\r\n      return element.closest(this.options.containerSelector).data(pluginName)\r\n    },\r\n    $getOffsetParent: function  () {\r\n      if(this.offsetParent === undefined){\r\n        var i = this.containers.length - 1,\r\n        offsetParent = this.containers[i].getItemOffsetParent()\r\n\r\n        if(!this.options.rootGroup){\r\n          while(i--){\r\n            if(offsetParent[0] != this.containers[i].getItemOffsetParent()[0]){\r\n              // If every container has the same offset parent,\r\n              // use position() which is relative to this parent,\r\n              // otherwise use offset()\r\n              // compare #setDimensions\r\n              offsetParent = false\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        this.offsetParent = offsetParent\r\n      }\r\n      return this.offsetParent\r\n    },\r\n    setPointer: function (e) {\r\n      var pointer = this.getPointer(e)\r\n\r\n      if(this.$getOffsetParent()){\r\n        var relativePointer = getRelativePosition(pointer, this.$getOffsetParent())\r\n        this.lastRelativePointer = this.relativePointer\r\n        this.relativePointer = relativePointer\r\n      }\r\n\r\n      this.lastPointer = this.pointer\r\n      this.pointer = pointer\r\n    },\r\n    distanceMet: function (e) {\r\n      var currentPointer = this.getPointer(e)\r\n      return (Math.max(\r\n        Math.abs(this.pointer.left - currentPointer.left),\r\n        Math.abs(this.pointer.top - currentPointer.top)\r\n      ) >= this.options.distance)\r\n    },\r\n    getPointer: function(e) {\r\n      var o = e.originalEvent || e.originalEvent.touches && e.originalEvent.touches[0]\r\n      return {\r\n        left: e.pageX || o.pageX,\r\n        top: e.pageY || o.pageY\r\n      }\r\n    },\r\n    setupDelayTimer: function () {\r\n      var that = this\r\n      this.delayMet = !this.options.delay\r\n\r\n      // init delay timer if needed\r\n      if (!this.delayMet) {\r\n        clearTimeout(this._mouseDelayTimer);\r\n        this._mouseDelayTimer = setTimeout(function() {\r\n          that.delayMet = true\r\n        }, this.options.delay)\r\n      }\r\n    },\r\n    scroll: function  (e) {\r\n      this.clearDimensions()\r\n      this.clearOffsetParent() // TODO is this needed?\r\n    },\r\n    toggleListeners: function (method) {\r\n      var that = this,\r\n      events = ['drag','drop','scroll']\r\n\r\n      $.each(events,function  (i,event) {\r\n        that.$document[method](eventNames[event], that[event + 'Proxy'])\r\n      })\r\n    },\r\n    clearOffsetParent: function () {\r\n      this.offsetParent = undefined\r\n    },\r\n    // Recursively clear container and item dimensions\r\n    clearDimensions: function  () {\r\n      this.traverse(function(object){\r\n        object._clearDimensions()\r\n      })\r\n    },\r\n    traverse: function(callback) {\r\n      callback(this)\r\n      var i = this.containers.length\r\n      while(i--){\r\n        this.containers[i].traverse(callback)\r\n      }\r\n    },\r\n    _clearDimensions: function(){\r\n      this.containerDimensions = undefined\r\n    },\r\n    _destroy: function () {\r\n      containerGroups[this.options.group] = undefined\r\n    }\r\n  }\r\n\r\n  function Container(element, options) {\r\n    this.el = element\r\n    this.options = $.extend( {}, containerDefaults, options)\r\n\r\n    this.group = ContainerGroup.get(this.options)\r\n    this.rootGroup = this.options.rootGroup || this.group\r\n    this.handle = this.rootGroup.options.handle || this.rootGroup.options.itemSelector\r\n\r\n    var itemPath = this.rootGroup.options.itemPath\r\n    this.target = itemPath ? this.el.find(itemPath) : this.el\r\n\r\n    this.target.on(eventNames.start, this.handle, $.proxy(this.dragInit, this))\r\n\r\n    if(this.options.drop)\r\n      this.group.containers.push(this)\r\n  }\r\n\r\n  Container.prototype = {\r\n    dragInit: function  (e) {\r\n      var rootGroup = this.rootGroup\r\n\r\n      if( !this.disabled &&\r\n          !rootGroup.dragInitDone &&\r\n          this.options.drag &&\r\n          this.isValidDrag(e)) {\r\n        rootGroup.dragInit(e, this)\r\n      }\r\n    },\r\n    isValidDrag: function(e) {\r\n      return e.which == 1 ||\r\n        e.type == \"touchstart\" && e.originalEvent.touches.length == 1\r\n    },\r\n    searchValidTarget: function  (pointer, lastPointer) {\r\n      var distances = sortByDistanceDesc(this.getItemDimensions(),\r\n                                         pointer,\r\n                                         lastPointer),\r\n      i = distances.length,\r\n      rootGroup = this.rootGroup,\r\n      validTarget = !rootGroup.options.isValidTarget ||\r\n        rootGroup.options.isValidTarget(rootGroup.item, this)\r\n\r\n      if(!i && validTarget){\r\n        rootGroup.movePlaceholder(this, this.target, \"append\")\r\n        return true\r\n      } else\r\n        while(i--){\r\n          var index = distances[i][0],\r\n          distance = distances[i][1]\r\n          if(!distance && this.hasChildGroup(index)){\r\n            var found = this.getContainerGroup(index).searchValidTarget(pointer, lastPointer)\r\n            if(found)\r\n              return true\r\n          }\r\n          else if(validTarget){\r\n            this.movePlaceholder(index, pointer)\r\n            return true\r\n          }\r\n        }\r\n    },\r\n    movePlaceholder: function  (index, pointer) {\r\n      var item = $(this.items[index]),\r\n      dim = this.itemDimensions[index],\r\n      method = \"after\",\r\n      width = item.outerWidth(),\r\n      height = item.outerHeight(),\r\n      offset = item.offset(),\r\n      sameResultBox = {\r\n        left: offset.left,\r\n        right: offset.left + width,\r\n        top: offset.top,\r\n        bottom: offset.top + height\r\n      }\r\n      if(this.options.vertical){\r\n        var yCenter = (dim[2] + dim[3]) / 2,\r\n        inUpperHalf = pointer.top <= yCenter\r\n        if(inUpperHalf){\r\n          method = \"before\"\r\n          sameResultBox.bottom -= height / 2\r\n        } else\r\n          sameResultBox.top += height / 2\r\n      } else {\r\n        var xCenter = (dim[0] + dim[1]) / 2,\r\n        inLeftHalf = pointer.left <= xCenter\r\n        if(inLeftHalf){\r\n          method = \"before\"\r\n          sameResultBox.right -= width / 2\r\n        } else\r\n          sameResultBox.left += width / 2\r\n      }\r\n      if(this.hasChildGroup(index))\r\n        sameResultBox = emptyBox\r\n      this.rootGroup.movePlaceholder(this, item, method, sameResultBox)\r\n    },\r\n    getItemDimensions: function  () {\r\n      if(!this.itemDimensions){\r\n        this.items = this.$getChildren(this.el, \"item\").filter(\r\n          \":not(.\" + this.group.options.placeholderClass + \", .\" + this.group.options.draggedClass + \")\"\r\n        ).get()\r\n        setDimensions(this.items, this.itemDimensions = [], this.options.tolerance)\r\n      }\r\n      return this.itemDimensions\r\n    },\r\n    getItemOffsetParent: function  () {\r\n      var offsetParent,\r\n      el = this.el\r\n      // Since el might be empty we have to check el itself and\r\n      // can not do something like el.children().first().offsetParent()\r\n      if(el.css(\"position\") === \"relative\" || el.css(\"position\") === \"absolute\"  || el.css(\"position\") === \"fixed\")\r\n        offsetParent = el\r\n      else\r\n        offsetParent = el.offsetParent()\r\n      return offsetParent\r\n    },\r\n    hasChildGroup: function (index) {\r\n      return this.options.nested && this.getContainerGroup(index)\r\n    },\r\n    getContainerGroup: function  (index) {\r\n      var childGroup = $.data(this.items[index], subContainerKey)\r\n      if( childGroup === undefined){\r\n        var childContainers = this.$getChildren(this.items[index], \"container\")\r\n        childGroup = false\r\n\r\n        if(childContainers[0]){\r\n          var options = $.extend({}, this.options, {\r\n            rootGroup: this.rootGroup,\r\n            group: groupCounter ++\r\n          })\r\n          childGroup = childContainers[pluginName](options).data(pluginName).group\r\n        }\r\n        $.data(this.items[index], subContainerKey, childGroup)\r\n      }\r\n      return childGroup\r\n    },\r\n    $getChildren: function (parent, type) {\r\n      var options = this.rootGroup.options,\r\n      path = options[type + \"Path\"],\r\n      selector = options[type + \"Selector\"]\r\n\r\n      parent = $(parent)\r\n      if(path)\r\n        parent = parent.find(path)\r\n\r\n      return parent.children(selector)\r\n    },\r\n    _serialize: function (parent, isContainer) {\r\n      var that = this,\r\n      childType = isContainer ? \"item\" : \"container\",\r\n\r\n      children = this.$getChildren(parent, childType).not(this.options.exclude).map(function () {\r\n        return that._serialize($(this), !isContainer)\r\n      }).get()\r\n\r\n      return this.rootGroup.options.serialize(parent, children, isContainer)\r\n    },\r\n    traverse: function(callback) {\r\n      $.each(this.items || [], function(item){\r\n        var group = $.data(this, subContainerKey)\r\n        if(group)\r\n          group.traverse(callback)\r\n      });\r\n\r\n      callback(this)\r\n    },\r\n    _clearDimensions: function  () {\r\n      this.itemDimensions = undefined\r\n    },\r\n    _destroy: function() {\r\n      var that = this;\r\n\r\n      this.target.off(eventNames.start, this.handle);\r\n      this.el.removeData(pluginName)\r\n\r\n      if(this.options.drop)\r\n        this.group.containers = $.grep(this.group.containers, function(val){\r\n          return val != that\r\n        })\r\n\r\n      $.each(this.items || [], function(){\r\n        $.removeData(this, subContainerKey)\r\n      })\r\n    }\r\n  }\r\n\r\n  var API = {\r\n    enable: function() {\r\n      this.traverse(function(object){\r\n        object.disabled = false\r\n      })\r\n    },\r\n    disable: function (){\r\n      this.traverse(function(object){\r\n        object.disabled = true\r\n      })\r\n    },\r\n    serialize: function () {\r\n      return this._serialize(this.el, true)\r\n    },\r\n    refresh: function() {\r\n      this.traverse(function(object){\r\n        object._clearDimensions()\r\n      })\r\n    },\r\n    destroy: function () {\r\n      this.traverse(function(object){\r\n        object._destroy();\r\n      })\r\n    }\r\n  }\r\n\r\n  $.extend(Container.prototype, API)\r\n\r\n  /**\r\n   * jQuery API\r\n   *\r\n   * Parameters are\r\n   *   either options on init\r\n   *   or a method name followed by arguments to pass to the method\r\n   */\r\n  $.fn[pluginName] = function(methodOrOptions) {\r\n    var args = Array.prototype.slice.call(arguments, 1)\r\n\r\n    return this.map(function(){\r\n      var $t = $(this),\r\n      object = $t.data(pluginName)\r\n\r\n      if(object && API[methodOrOptions])\r\n        return API[methodOrOptions].apply(object, args) || this\r\n      else if(!object && (methodOrOptions === undefined ||\r\n                          typeof methodOrOptions === \"object\"))\r\n        $t.data(pluginName, new Container($t, methodOrOptions))\r\n\r\n      return this\r\n    });\r\n  };\r\n\r\n}(jQuery, window, 'sortable');\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}