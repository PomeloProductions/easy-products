(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by bryce on 2/16/17.
 */

var CookieFactory = exports.CookieFactory = function () {

    /**
     * Default constructor, requires a namespace being passed in for prefixing all data
     *
     * @param nameSpace
     */
    function CookieFactory(nameSpace) {
        _classCallCheck(this, CookieFactory);

        this.nameSpace = nameSpace;
    }

    /**
     * Saves a cookie to persistent storage
     *
     * @param name The key of the cookie
     * @param value The new value of the cookie
     */


    _createClass(CookieFactory, [{
        key: "saveCookie",
        value: function saveCookie(name, value) {
            document.cookie = this.nameSpace + "-" + name + "=" + value + "; path=/";
        }

        /**
         * Saves a json object as a cookie
         *
         * @param name The key for the cookie
         * @param value The json object to save
         */

    }, {
        key: "saveJSON",
        value: function saveJSON(name, value) {

            this.saveCookie(name, JSON.stringify(value));
        }

        /**
         * Loads a cookie out of the document cookie list
         *
         * @param name The name of the cookie we are loading
         * @returns {*} the new object
         */

    }, {
        key: "loadCookie",
        value: function loadCookie(name) {

            name = this.nameSpace + "-" + name + "=";
            var ca = document.cookie.split(';');

            for (var i = 0; i < ca.length; i++) {

                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }

                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }

            return undefined;
        }

        /**
         * Parses a json object from a cookie, or returns an empty JSON
         *
         * @param name The name of the json we are loading
         * @returns {{}} The found object
         */

    }, {
        key: "loadJSON",
        value: function loadJSON(name) {
            var content = this.loadCookie(name);

            if (typeof content == "undefined") return {};else return JSON.parse(content);
        }

        /**
         * Parses a number from a cookie
         *
         * @param name The cookie we are looking for
         * @param defaultValue The default to return if the cookie was not found
         * @returns {*}
         */

    }, {
        key: "loadNumber",
        value: function loadNumber(name, defaultValue) {
            var content = this.loadCookie(name);

            if (typeof content == "undefined") return defaultValue;

            return Number(content);
        }

        /**
         * Parses a boolean value from a cookie
         *
         * @param name The cookie we are looking for
         * @param defaultValue A default to return if the value was undefined
         * @returns {*}
         */

    }, {
        key: "loadBoolean",
        value: function loadBoolean(name, defaultValue) {
            var content = this.loadCookie(name);

            if (typeof content == "undefined") return defaultValue;

            return content == 'true';
        }
    }]);

    return CookieFactory;
}();

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by bryce on 2/8/17.
 */

var Product = exports.Product = function () {

    /**
     * Creates a new instance of a product
     *
     * @param productContainer The container that will hold all data for this product
     * @param quantityChangedCallback
     */
    function Product(productContainer, quantityChangedCallback) {
        _classCallCheck(this, Product);

        this.quantityChangedCallback = quantityChangedCallback;

        this.shippingOptions = {};
        this.quantity = 0;
        this.total = 0;

        this.id = productContainer.dataset['id'];
        this.cost = productContainer.dataset['cost'];
        this.weight = productContainer.dataset['weight'];

        var shippingDivs = productContainer.getElementsByClassName('easy_products-shipping_option');

        for (var i = 0; i < shippingDivs.length; i++) {

            var shippingDiv = shippingDivs[i];

            var regionId = shippingDiv.dataset['region_id'];

            var key = regionId ? regionId : 'default';

            this.shippingOptions[key] = {
                primary_rate: Number(shippingDiv.dataset['primary_rate']),
                add_on_rate: Number(shippingDiv.dataset['add_on_rate'])
            };
        }

        this.quantityInput = productContainer.querySelector('.easy_products-quantity_input');
        this.totalDisplay = productContainer.querySelector('.easy_products-product_total_display');
        this.productTotal = productContainer.querySelector('.easy_products-product_total');

        this.quantityInput.addEventListener('change', this.quantityChanged.bind(this));
    }

    /**
     * Sets the quantity and updates the cost variables
     *
     * @param quantity
     */


    _createClass(Product, [{
        key: 'setQuantity',
        value: function setQuantity(quantity) {
            this.quantity = quantity;
            this.total = quantity * this.cost;

            if (this.quantity != this.quantityInput.value) {
                this.quantityInput.value = this.quantity;
            }

            if (this.total > 0) {
                this.productTotal.innerHTML = this.total.toFixed(2);
                this.totalDisplay.style.display = '';
            } else {
                this.totalDisplay.style.display = 'none';
            }
        }

        /**
         * Called when quantity has changed in the input, and will recalculate the totals for this product
         */

    }, {
        key: 'quantityChanged',
        value: function quantityChanged() {

            var quantity = Number(this.quantityInput.value);

            if (isNaN(quantity)) {
                quantity = 0;
            }

            this.setQuantity(quantity);

            if (typeof this.quantityChangedCallback == 'function') {
                this.quantityChangedCallback(this);
            }
        }

        /**
         * retrieves the shipping rate for the specified region
         *
         * @param regionId
         * @returns {*}
         */

    }, {
        key: 'retrieveShippingRates',
        value: function retrieveShippingRates(regionId) {
            var rates = this.shippingOptions[regionId];

            return rates ? rates : this.shippingOptions['default'];
        }

        /**
         * Compare function for comparing weights of two products
         *
         * @param a Product
         * @param b Product
         * @returns {number}
         */

    }], [{
        key: 'compareWeights',
        value: function compareWeights(a, b) {
            if (a.weight < b.weight) {
                return -1;
            }
            if (a.weight > b.weight) {
                return 1;
            }
            return 0;
        }
    }]);

    return Product;
}();

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by bryce on 2/16/17.
 */

var ShippingField = exports.ShippingField = function () {

    /**
     * Default constructor for a field
     *
     * @param field HTMLNode
     * @param changeCallback Function
     * @param cookieFactory CookieFactory
     * @param cookieKey The key for the stored cookie
     */
    function ShippingField(field, changeCallback, cookieFactory, cookieKey) {
        _classCallCheck(this, ShippingField);

        this.field = field;
        this.changeCallback = changeCallback;
        this.cookieFactory = cookieFactory;
        this.cookieKey = cookieKey;

        this.valueEntered = false;
        this.required = this.field.hasAttribute('required');

        this.blankValue = this.field.dataset['blank_value'];

        var storedValue = this.cookieFactory.loadCookie(this.cookieKey);

        if (storedValue) {
            this.field.value = storedValue;
            this.checkInputValue();
        }

        this.field.addEventListener('change', this.verifyInputValue.bind(this));
    }

    /**
     * Determines if the user has entered a proper value
     */


    _createClass(ShippingField, [{
        key: 'checkInputValue',
        value: function checkInputValue() {

            this.valueEntered = false;

            if (this.field.value) {

                if (this.blankValue) {
                    this.valueEntered = this.blankValue != this.field.value;
                } else {
                    this.valueEntered = true;
                }
            }
        }

        /**
         * double checks input value when it changes to verify a value was entered properly
         */

    }, {
        key: 'verifyInputValue',
        value: function verifyInputValue() {
            this.checkInputValue();

            if (this.valueEntered) {
                this.cookieFactory.saveCookie(this.cookieKey, this.field.value);
                this.changeCallback();
            }
        }

        /**
         * Checks whether or not this field is ready for submission
         *
         * @returns Boolean
         */

    }, {
        key: 'checkIfComplete',
        value: function checkIfComplete() {

            return this.required ? this.valueEntered : true;
        }
    }]);

    return ShippingField;
}();

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ShippingManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
reated by bryce on 2/16/17.


var _ShippingField = require("./ShippingField");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShippingManager = exports.ShippingManager = function () {

    /**
     * Manages the current state of the shipping options
     *
     * @param form
     * @param addressChangeCallback function
     * @param cookieFactory CookieFactory
     */
    function ShippingManager(form, addressChangeCallback, cookieFactory) {
        _classCallCheck(this, ShippingManager);

        ShippingManager.NAME_COOKIE = "name";
        ShippingManager.ADDRESS_1_COOKIE = "address_1";
        ShippingManager.ADDRESS_2_COOKIE = "address_2";
        ShippingManager.CITY_COOKIE = "city";
        ShippingManager.POSTAL_CODE_COOKIE = "postal_code";
        ShippingManager.STATE_COOKIE = "state";
        ShippingManager.COUNTRY_COOKIE = "country";

        var nameInput = form.querySelector("#easy_products-name");
        var address1Input = form.querySelector("#easy_products-address_1");
        var address2Input = form.querySelector("#easy_products-address_2");
        var cityInput = form.querySelector("#easy_products-city");
        var postalCodeInput = form.querySelector("#easy_products-postal_code");
        var stateInput = form.querySelector("#easy_products-state");
        var countrySelect = form.querySelector("#easy_products-country");

        this.nameField = new _ShippingField.ShippingField(nameInput, addressChangeCallback, cookieFactory, ShippingManager.NAME_COOKIE);
        this.address1Field = new _ShippingField.ShippingField(address1Input, addressChangeCallback, cookieFactory, ShippingManager.ADDRESS_1_COOKIE);
        this.address2Field = new _ShippingField.ShippingField(address2Input, addressChangeCallback, cookieFactory, ShippingManager.ADDRESS_2_COOKIE);
        this.cityField = new _ShippingField.ShippingField(cityInput, addressChangeCallback, cookieFactory, ShippingManager.CITY_COOKIE);
        this.postalCodeField = new _ShippingField.ShippingField(postalCodeInput, addressChangeCallback, cookieFactory, ShippingManager.POSTAL_CODE_COOKIE);
        this.stateField = new _ShippingField.ShippingField(stateInput, addressChangeCallback, cookieFactory, ShippingManager.STATE_COOKIE);
        this.countryField = new _ShippingField.ShippingField(countrySelect, addressChangeCallback, cookieFactory, ShippingManager.COUNTRY_COOKIE);
    }

    /**
     * Checks all fields to see if the shipping is ready to go
     *
     * @returns {Boolean}
     */


    _createClass(ShippingManager, [{
        key: "checkIfShippingComplete",
        value: function checkIfShippingComplete() {

            return this.nameField.checkIfComplete() && this.address1Field.checkIfComplete() && this.address2Field.checkIfComplete() && this.cityField.checkIfComplete() && this.postalCodeField.checkIfComplete() && this.stateField.checkIfComplete() && this.countryField.checkIfComplete();
        }

        /**
         * Bundles the entire address component into a JSON
         *
         * @returns {{name: *, addressLine1: *, addressLine2: *, city: *, postalCode: *, country: {id: *, name: *}}}
         */

    }, {
        key: "bundleAddress",
        value: function bundleAddress() {

            var selectedOption = this.countryField.field.options[this.countryField.field.selectedIndex];

            return {
                name: this.nameField.field.value,
                addressLine1: this.address1Field.field.value,
                addressLine2: this.address2Field.field.value,
                city: this.cityField.field.value,
                postalCode: this.postalCodeField.field.value,
                state: this.stateField.field.value,
                country: {
                    id: selectedOption.value,
                    name: selectedOption.text
                }
            };
        }

        /**
         * Gets the selected region id or undefined if none has been found
         *
         * @returns Boolean|undefined
         */

    }, {
        key: "getRegionId",
        value: function getRegionId() {
            return this.countryField.checkIfComplete() ? this.countryField.field.value : undefined;
        }
    }]);

    return ShippingManager;
}();

},{"./ShippingField":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ShoppingCart = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
reated by bryce on 2/8/17.


var _Product = require('./Product');

var _CookieFactory = require('./CookieFactory');

var _ShippingManager = require('./ShippingManager');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShoppingCart = exports.ShoppingCart = function () {

    /**
     * Constructor for this shopping cart instance
     *
     * @param productsForm the dom form
     */
    function ShoppingCart(productsForm) {
        _classCallCheck(this, ShoppingCart);

        ShoppingCart.PRODUCTS_COOKIE = 'product_quantities';

        this.productsForm = productsForm;

        this.subtotalDisplay = this.productsForm.querySelector('#easy_products-subtotal');
        this.shippingDisplay = this.productsForm.querySelector('#easy_products-shipping_total');
        this.totalDisplay = this.productsForm.querySelector('#easy_products-total');

        this.submitButton = this.productsForm.querySelector('#easy_products-submit');

        this.cookieFactory = new _CookieFactory.CookieFactory('easy_products');

        this.productQuantities = this.cookieFactory.loadJSON(ShoppingCart.PRODUCTS_COOKIE);
        var unsortedProducts = [];

        var productContainers = this.productsForm.getElementsByClassName('easy_products-product');

        for (var i = 0; i < productContainers.length; i++) {

            var product = new _Product.Product(productContainers[i], this.quantityChanged.bind(this));

            var storedQuantity = this.productQuantities[product.id];

            if (typeof storedQuantity != 'number') {
                storedQuantity = 0;
            }

            product.setQuantity(storedQuantity);

            unsortedProducts.push(product);
        }

        this.products = unsortedProducts.sort(_Product.Product.compareWeights).reverse();

        this.shippingManager = new _ShippingManager.ShippingManager(this.productsForm, this.checkShippingAddress.bind(this), this.cookieFactory);

        this.calculateTotals();

        if (document.readyState === "complete" || document.readyState === "loaded") {
            this.setupSubmitCallback();
        } else {
            document.addEventListener('DOMContentLoaded', this.setupSubmitCallback.bind(this));
        }
    }

    /**
     * Sets up the complete callback
     */


    _createClass(ShoppingCart, [{
        key: 'setupSubmitCallback',
        value: function setupSubmitCallback() {

            var submitCallbackName = this.productsForm.dataset['submit_callback'];

            if (submitCallbackName) {
                var submitCallback = eval(submitCallbackName);

                if (typeof submitCallback == 'function') {
                    this.submitCallback = submitCallback;
                }
            }

            this.productsForm.addEventListener('submit', this.submitForm.bind(this));
        }

        /**
         * Stops the submission if a complete callback is set
         *
         * @param event
         */

    }, {
        key: 'submitForm',
        value: function submitForm(event) {
            if (this.submitCallback) {
                event.preventDefault();

                var productData = [];

                for (var i = 0; i < this.products.length; i++) {

                    var product = this.products[i];

                    if (product.quantity) {
                        productData.push({
                            id: product.id,
                            quantity: product.quantity
                        });
                    }
                }

                this.submitCallback(this.total, productData, this.shippingManager.bundleAddress());
            }
        }

        /**
         * checks to see if the shipping address has been changed
         */

    }, {
        key: 'checkShippingAddress',
        value: function checkShippingAddress() {

            if (this.shippingManager.checkIfShippingComplete()) {
                this.calculateTotals();
            } else {
                this.shippingDisplay.innerHTML = 'Please Enter Your Shipping Address';
                this.totalDisplay.innerHTML = 'Please Enter Your Shipping Address';

                this.submitButton.disabled = true;
            }
        }

        /**
         * Called whenever a quantity has changed
         *
         * @param product Product
         */

    }, {
        key: 'quantityChanged',
        value: function quantityChanged(product) {
            this.productQuantities[product.id] = product.quantity;
            this.cookieFactory.saveJSON(ShoppingCart.PRODUCTS_COOKIE, this.productQuantities);

            this.calculateTotals();
        }

        /**
         * Recalculates all totals
         */

    }, {
        key: 'calculateTotals',
        value: function calculateTotals() {

            var subtotal = 0;
            for (var i = 0; i < this.products.length; i++) {
                subtotal += this.products[i].total;
            }

            this.subtotalDisplay.innerHTML = '$' + subtotal.toFixed(2);

            if (this.shippingManager.checkIfShippingComplete()) {

                var shippingTotal = 0;
                var regionId = this.shippingManager.getRegionId();

                for (var _i = 0; _i < this.products.length; _i++) {
                    var product = this.products[_i];

                    if (product.quantity) {

                        var shippingRates = product.retrieveShippingRates(regionId);

                        var addOnQuantity = product.quantity;

                        if (shippingTotal == 0) {
                            shippingTotal += shippingRates.primary_rate;
                            addOnQuantity--;
                        }
                        if (addOnQuantity) {
                            shippingTotal += shippingRates.add_on_rate * addOnQuantity;
                        }
                    }
                }

                this.shippingDisplay.innerHTML = '$' + shippingTotal.toFixed(2);

                this.total = subtotal + shippingTotal;

                this.totalDisplay.innerHTML = '$' + this.total.toFixed(2);

                this.submitButton.disabled = false;
            }
        }
    }]);

    return ShoppingCart;
}();

},{"./CookieFactory":1,"./Product":2,"./ShippingManager":4}],6:[function(require,module,exports){
'use strict';

var _ShoppingCart = require('./classes/ShoppingCart');

var productsForm = document.getElementById('easy_products-products_list'); /**
                                                                            * Created by bryce on 2/8/17.
                                                                            */

if (typeof productsForm != 'undefined') {
  new _ShoppingCart.ShoppingCart(productsForm);
}

},{"./classes/ShoppingCart":5}]},{},[6])

//# sourceMappingURL=app.min.js.map
